import {
  __commonJS
} from "./chunk-RSJERJUL.js";

// node_modules/amplitudejs/dist/amplitude.js
var require_amplitude = __commonJS({
  "node_modules/amplitudejs/dist/amplitude.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory();
      else if (typeof define === "function" && define.amd)
        define("Amplitude", [], factory);
      else if (typeof exports === "object")
        exports["Amplitude"] = factory();
      else
        root["Amplitude"] = factory();
    })(exports, function() {
      return function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId]) {
            return installedModules[moduleId].exports;
          }
          var module2 = installedModules[moduleId] = {
            i: moduleId,
            l: false,
            exports: {}
          };
          modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.l = true;
          return module2.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.i = function(value) {
          return value;
        };
        __webpack_require__.d = function(exports2, name, getter) {
          if (!__webpack_require__.o(exports2, name)) {
            Object.defineProperty(exports2, name, {
              configurable: false,
              enumerable: true,
              get: getter
            });
          }
        };
        __webpack_require__.n = function(module2) {
          var getter = module2 && module2.__esModule ? function getDefault() {
            return module2["default"];
          } : function getModuleExports() {
            return module2;
          };
          __webpack_require__.d(getter, "a", getter);
          return getter;
        };
        __webpack_require__.o = function(object, property) {
          return Object.prototype.hasOwnProperty.call(object, property);
        };
        __webpack_require__.p = "";
        return __webpack_require__(__webpack_require__.s = 47);
      }([
        function(module2, exports2, __webpack_require__) {
          "use strict";
          var _package = __webpack_require__(59);
          module2.exports = {
            version: _package.version,
            audio: new Audio(),
            active_metadata: {},
            active_album: "",
            active_index: 0,
            active_playlist: null,
            playback_speed: 1,
            callbacks: {},
            songs: [],
            playlists: {},
            start_song: "",
            starting_playlist: "",
            starting_playlist_song: "",
            repeat: false,
            repeat_song: false,
            shuffle_list: {},
            shuffle_on: false,
            default_album_art: "",
            default_playlist_art: "",
            debug: false,
            volume: 0.5,
            pre_mute_volume: 0.5,
            volume_increment: 5,
            volume_decrement: 5,
            soundcloud_client: "",
            soundcloud_use_art: false,
            soundcloud_song_count: 0,
            soundcloud_songs_ready: 0,
            is_touch_moving: false,
            buffered: 0,
            bindings: {},
            continue_next: true,
            delay: 0,
            player_state: "stopped",
            web_audio_api_available: false,
            context: null,
            source: null,
            analyser: null,
            visualizations: {
              available: [],
              active: [],
              backup: ""
            },
            waveforms: {
              sample_rate: 100,
              built: []
            }
          };
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _checks = __webpack_require__(5);
          var _checks2 = _interopRequireDefault(_checks);
          var _audioNavigation = __webpack_require__(3);
          var _audioNavigation2 = _interopRequireDefault(_audioNavigation);
          var _playPauseElements = __webpack_require__(2);
          var _playPauseElements2 = _interopRequireDefault(_playPauseElements);
          var _metaDataElements = __webpack_require__(7);
          var _metaDataElements2 = _interopRequireDefault(_metaDataElements);
          var _callbacks = __webpack_require__(9);
          var _callbacks2 = _interopRequireDefault(_callbacks);
          var _debug = __webpack_require__(4);
          var _debug2 = _interopRequireDefault(_debug);
          var _visualizations = __webpack_require__(16);
          var _visualizations2 = _interopRequireDefault(_visualizations);
          var _configState = __webpack_require__(6);
          var _configState2 = _interopRequireDefault(_configState);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Core = function() {
            function play() {
              _visualizations2.default.stop();
              _visualizations2.default.run();
              if (_config2.default.active_metadata.live) {
                reconnectStream();
              }
              if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && !_config2.default.paused) {
                reconnectStream();
              }
              var playPromise = _config2.default.audio.play();
              if (playPromise !== void 0) {
                playPromise.then(function(_) {
                }).catch(function(error) {
                });
              }
              _config2.default.audio.play();
              _config2.default.audio.playbackRate = _config2.default.playback_speed;
              _configState2.default.setPlayerState();
            }
            function pause() {
              _visualizations2.default.stop();
              _config2.default.audio.pause();
              _config2.default.paused = true;
              if (_config2.default.active_metadata.live) {
                disconnectStream();
              }
              _configState2.default.setPlayerState();
            }
            function stop() {
              _visualizations2.default.stop();
              if (_config2.default.audio.currentTime != 0) {
                _config2.default.audio.currentTime = 0;
              }
              _config2.default.audio.pause();
              if (_config2.default.active_metadata.live) {
                disconnectStream();
              }
              _configState2.default.setPlayerState();
              _callbacks2.default.run("stop");
            }
            function setVolume(volumeLevel) {
              if (volumeLevel == 0) {
                _config2.default.audio.muted = true;
              } else {
                _config2.default.audio.muted = false;
              }
              _config2.default.volume = volumeLevel;
              _config2.default.audio.volume = volumeLevel / 100;
            }
            function setSongLocation(songPercentage) {
              if (!_config2.default.active_metadata.live) {
                _config2.default.audio.currentTime = _config2.default.audio.duration * (songPercentage / 100);
              }
            }
            function skipToLocation(seconds) {
              _config2.default.audio.addEventListener("canplaythrough", function() {
                if (_config2.default.audio.duration >= seconds && seconds > 0) {
                  _config2.default.audio.currentTime = seconds;
                } else {
                  _debug2.default.writeMessage("Amplitude can't skip to a location greater than the duration of the audio or less than 0");
                }
              }, { once: true });
            }
            function disconnectStream() {
              _config2.default.audio.src = "";
              _config2.default.audio.load();
            }
            function reconnectStream() {
              _config2.default.audio.src = _config2.default.active_metadata.url;
              _config2.default.audio.load();
            }
            function setPlaybackSpeed(playbackSpeed) {
              _config2.default.playback_speed = playbackSpeed;
              _config2.default.audio.playbackRate = _config2.default.playback_speed;
            }
            return {
              play,
              pause,
              stop,
              setVolume,
              setSongLocation,
              skipToLocation,
              disconnectStream,
              reconnectStream,
              setPlaybackSpeed
            };
          }();
          exports2.default = Core;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var PlayPauseElements = function() {
            function sync() {
              syncGlobal();
              syncPlaylist();
              syncSong();
              syncSongInPlaylist();
            }
            function syncGlobal() {
              var state = _config2.default.audio.paused ? "paused" : "playing";
              var playPauseElements = document.querySelectorAll(".amplitude-play-pause");
              for (var i = 0; i < playPauseElements.length; i++) {
                var playlist = playPauseElements[i].getAttribute("data-amplitude-playlist");
                var song = playPauseElements[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && song == null) {
                  switch (state) {
                    case "playing":
                      setElementPlay(playPauseElements[i]);
                      break;
                    case "paused":
                      setElementPause(playPauseElements[i]);
                      break;
                  }
                }
              }
            }
            function syncPlaylist() {
              var state = _config2.default.audio.paused ? "paused" : "playing";
              var playlistPlayPauseElements = document.querySelectorAll('.amplitude-play-pause[data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              for (var i = 0; i < playlistPlayPauseElements.length; i++) {
                var song = playlistPlayPauseElements[i].getAttribute("data-amplitude-song-index");
                if (song == null) {
                  switch (state) {
                    case "playing":
                      setElementPlay(playlistPlayPauseElements[i]);
                      break;
                    case "paused":
                      setElementPause(playlistPlayPauseElements[i]);
                      break;
                  }
                }
              }
            }
            function syncSong() {
              var state = _config2.default.audio.paused ? "paused" : "playing";
              var songPlayPauseElements = document.querySelectorAll('.amplitude-play-pause[data-amplitude-song-index="' + _config2.default.active_index + '"]');
              for (var i = 0; i < songPlayPauseElements.length; i++) {
                var playlist = songPlayPauseElements[i].getAttribute("data-amplitude-playlist");
                if (playlist == null) {
                  switch (state) {
                    case "playing":
                      setElementPlay(songPlayPauseElements[i]);
                      break;
                    case "paused":
                      setElementPause(songPlayPauseElements[i]);
                      break;
                  }
                }
              }
            }
            function syncSongInPlaylist() {
              var state = _config2.default.audio.paused ? "paused" : "playing";
              var activePlaylistIndex = _config2.default.active_playlist != "" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
              var songInPlaylistPlayPauseElements = document.querySelectorAll('.amplitude-play-pause[data-amplitude-song-index="' + activePlaylistIndex + '"][data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              for (var i = 0; i < songInPlaylistPlayPauseElements.length; i++) {
                switch (state) {
                  case "playing":
                    setElementPlay(songInPlaylistPlayPauseElements[i]);
                    break;
                  case "paused":
                    setElementPause(songInPlaylistPlayPauseElements[i]);
                    break;
                }
              }
            }
            function syncToPause() {
              var playPauseElements = document.querySelectorAll(".amplitude-play-pause");
              for (var i = 0; i < playPauseElements.length; i++) {
                setElementPause(playPauseElements[i]);
              }
            }
            function setElementPlay(element) {
              element.classList.add("amplitude-playing");
              element.classList.remove("amplitude-paused");
            }
            function setElementPause(element) {
              element.classList.remove("amplitude-playing");
              element.classList.add("amplitude-paused");
            }
            return {
              sync,
              syncGlobal,
              syncPlaylist,
              syncSong,
              syncSongInPlaylist,
              syncToPause
            };
          }();
          exports2.default = PlayPauseElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _callbacks = __webpack_require__(9);
          var _callbacks2 = _interopRequireDefault(_callbacks);
          var _checks = __webpack_require__(5);
          var _checks2 = _interopRequireDefault(_checks);
          var _playPauseElements = __webpack_require__(2);
          var _playPauseElements2 = _interopRequireDefault(_playPauseElements);
          var _songSliderElements = __webpack_require__(14);
          var _songSliderElements2 = _interopRequireDefault(_songSliderElements);
          var _songPlayedProgressElements = __webpack_require__(20);
          var _songPlayedProgressElements2 = _interopRequireDefault(_songPlayedProgressElements);
          var _timeElements = __webpack_require__(15);
          var _timeElements2 = _interopRequireDefault(_timeElements);
          var _metaDataElements = __webpack_require__(7);
          var _metaDataElements2 = _interopRequireDefault(_metaDataElements);
          var _containerElements = __webpack_require__(49);
          var _containerElements2 = _interopRequireDefault(_containerElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var AudioNavigation = function() {
            function setNext() {
              var songEnded = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
              var nextIndex = null;
              var nextSong = {};
              var endOfList = false;
              if (_config2.default.repeat_song) {
                if (_config2.default.shuffle_on) {
                  nextIndex = _config2.default.shuffle_list[_config2.default.active_index].index;
                  nextSong = _config2.default.shuffle_list[nextIndex];
                } else {
                  nextIndex = _config2.default.active_index;
                  nextSong = _config2.default.songs[nextIndex];
                }
              } else {
                if (_config2.default.shuffle_on) {
                  if (parseInt(_config2.default.active_index) + 1 < _config2.default.shuffle_list.length) {
                    nextIndex = parseInt(_config2.default.active_index) + 1;
                  } else {
                    nextIndex = 0;
                    endOfList = true;
                  }
                  nextSong = _config2.default.shuffle_list[nextIndex];
                } else {
                  if (parseInt(_config2.default.active_index) + 1 < _config2.default.songs.length) {
                    nextIndex = parseInt(_config2.default.active_index) + 1;
                  } else {
                    nextIndex = 0;
                    endOfList = true;
                  }
                  nextSong = _config2.default.songs[nextIndex];
                }
              }
              changeSong(nextSong, nextIndex);
              if (endOfList && !_config2.default.repeat) {
              } else {
                if (!(songEnded && !_config2.default.repeat && endOfList)) {
                  _core2.default.play();
                }
              }
              _playPauseElements2.default.sync();
              _callbacks2.default.run("next");
              if (_config2.default.repeat_song) {
                _callbacks2.default.run("song_repeated");
              }
            }
            function setNextPlaylist(playlist) {
              var songEnded = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              var nextIndex = null;
              var nextSong = {};
              var endOfList = false;
              if (_config2.default.repeat_song) {
                if (_config2.default.playlists[playlist].shuffle) {
                  nextIndex = _config2.default.playlists[playlist].active_index;
                  nextSong = _config2.default.playlists[playlist].shuffle_list[nextIndex];
                } else {
                  nextIndex = _config2.default.playlists[playlist].active_index;
                  nextSong = _config2.default.playlists[playlist].songs[nextIndex];
                }
              } else {
                if (_config2.default.playlists[playlist].shuffle) {
                  if (parseInt(_config2.default.playlists[playlist].active_index) + 1 < _config2.default.playlists[playlist].shuffle_list.length) {
                    nextIndex = _config2.default.playlists[playlist].active_index + 1;
                  } else {
                    nextIndex = 0;
                    endOfList = true;
                  }
                  nextSong = _config2.default.playlists[playlist].shuffle_list[nextIndex];
                } else {
                  if (parseInt(_config2.default.playlists[playlist].active_index) + 1 < _config2.default.playlists[playlist].songs.length) {
                    nextIndex = parseInt(_config2.default.playlists[playlist].active_index) + 1;
                  } else {
                    nextIndex = 0;
                    endOfList = true;
                  }
                  nextSong = _config2.default.playlists[playlist].songs[nextIndex];
                }
              }
              setActivePlaylist(playlist);
              changeSongPlaylist(playlist, nextSong, nextIndex);
              if (endOfList && !_config2.default.repeat) {
              } else {
                if (!(songEnded && !_config2.default.repeat && endOfList)) {
                  _core2.default.play();
                }
              }
              _playPauseElements2.default.sync();
              _callbacks2.default.run("next");
              if (_config2.default.repeat_song) {
                _callbacks2.default.run("song_repeated");
              }
            }
            function setPrevious() {
              var previousIndex = null;
              var previousSong = {};
              if (_config2.default.repeat_song) {
                if (_config2.default.shuffle_on) {
                  previousIndex = _config2.default.active_index;
                  previousSong = _config2.default.shuffle_list[previousIndex];
                } else {
                  previousIndex = _config2.default.active_index;
                  previousSong = _config2.default.songs[previousIndex];
                }
              } else {
                if (parseInt(_config2.default.active_index) - 1 >= 0) {
                  previousIndex = parseInt(_config2.default.active_index - 1);
                } else {
                  previousIndex = parseInt(_config2.default.songs.length - 1);
                }
                if (_config2.default.shuffle_on) {
                  previousSong = _config2.default.shuffle_list[previousIndex];
                } else {
                  previousSong = _config2.default.songs[previousIndex];
                }
              }
              changeSong(previousSong, previousIndex);
              _core2.default.play();
              _playPauseElements2.default.sync();
              _callbacks2.default.run("prev");
              if (_config2.default.repeat_song) {
                _callbacks2.default.run("song_repeated");
              }
            }
            function setPreviousPlaylist(playlist) {
              var previousIndex = null;
              var previousSong = {};
              if (_config2.default.repeat_song) {
                if (_config2.default.playlists[playlist].shuffle) {
                  previousIndex = _config2.default.playlists[playlist].active_index;
                  previousSong = _config2.default.playlists[playlist].shuffle_list[previousIndex];
                } else {
                  previousIndex = _config2.default.playlists[playlist].active_index;
                  previousSong = _config2.default.playlists[playlist].songs[previousIndex];
                }
              } else {
                if (parseInt(_config2.default.playlists[playlist].active_index) - 1 >= 0) {
                  previousIndex = parseInt(_config2.default.playlists[playlist].active_index - 1);
                } else {
                  previousIndex = parseInt(_config2.default.playlists[playlist].songs.length - 1);
                }
                if (_config2.default.playlists[playlist].shuffle) {
                  previousSong = _config2.default.playlists[playlist].shuffle_list[previousIndex];
                } else {
                  previousSong = _config2.default.playlists[playlist].songs[previousIndex];
                }
              }
              setActivePlaylist(playlist);
              changeSongPlaylist(playlist, previousSong, previousIndex);
              _core2.default.play();
              _playPauseElements2.default.sync();
              _callbacks2.default.run("prev");
              if (_config2.default.repeat_song) {
                _callbacks2.default.run("song_repeated");
              }
            }
            function changeSong(song, index) {
              var direct = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
              prepareSongChange(song);
              _config2.default.audio.src = song.url;
              _config2.default.active_metadata = song;
              _config2.default.active_album = song.album;
              _config2.default.active_index = parseInt(index);
              afterSongChange(direct);
            }
            function changeSongPlaylist(playlist, song, index) {
              var direct = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
              prepareSongChange(song);
              _config2.default.audio.src = song.url;
              _config2.default.active_metadata = song;
              _config2.default.active_album = song.album;
              _config2.default.active_index = null;
              _config2.default.playlists[playlist].active_index = parseInt(index);
              afterSongChange(direct);
            }
            function prepareSongChange(song) {
              _core2.default.stop();
              _playPauseElements2.default.syncToPause();
              _songSliderElements2.default.resetElements();
              _songPlayedProgressElements2.default.resetElements();
              _timeElements2.default.resetCurrentTimes();
              if (_checks2.default.newAlbum(song)) {
                _callbacks2.default.run("album_change");
              }
            }
            function afterSongChange(direct) {
              _metaDataElements2.default.displayMetaData();
              _containerElements2.default.setActive(direct);
              _timeElements2.default.resetDurationTimes();
              _callbacks2.default.run("song_change");
            }
            function setActivePlaylist(playlist) {
              if (_config2.default.active_playlist != playlist) {
                _callbacks2.default.run("playlist_changed");
                _config2.default.active_playlist = playlist;
                if (playlist != null) {
                  _config2.default.playlists[playlist].active_index = 0;
                }
              }
            }
            return {
              setNext,
              setNextPlaylist,
              setPrevious,
              setPreviousPlaylist,
              changeSong,
              changeSongPlaylist,
              setActivePlaylist
            };
          }();
          exports2.default = AudioNavigation;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Debug = function() {
            function writeMessage(message) {
              if (_config2.default.debug) {
                console.log(message);
              }
            }
            return {
              writeMessage
            };
          }();
          exports2.default = Debug;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Checks = function() {
            function newSong(playlist, songIndex) {
              if (_config2.default.active_playlist != playlist) {
                return true;
              } else {
                if (_config2.default.active_playlist == null && playlist == null) {
                  if (_config2.default.active_index != songIndex) {
                    return true;
                  } else {
                    return false;
                  }
                } else {
                  if (_config2.default.active_playlist == playlist && _config2.default.playlists[playlist].active_index != songIndex) {
                    return true;
                  } else {
                    return false;
                  }
                }
              }
            }
            function newAlbum(album) {
              if (_config2.default.active_album != album) {
                return true;
              } else {
                return false;
              }
            }
            function newPlaylist(playlist) {
              if (_config2.default.active_playlist != playlist) {
                return true;
              } else {
                return false;
              }
            }
            function isURL(url) {
              var pattern = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
              return pattern.test(url);
            }
            function isInt(int) {
              return !isNaN(int) && parseInt(Number(int)) == int && !isNaN(parseInt(int, 10));
            }
            return {
              newSong,
              newAlbum,
              newPlaylist,
              isURL,
              isInt
            };
          }();
          exports2.default = Checks;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var ConfigState = function() {
            function resetConfig() {
              _config2.default.audio = new Audio();
              _config2.default.active_metadata = {};
              _config2.default.active_album = "";
              _config2.default.active_index = 0;
              _config2.default.active_playlist = null;
              _config2.default.playback_speed = 1;
              _config2.default.callbacks = {};
              _config2.default.songs = [];
              _config2.default.playlists = {};
              _config2.default.start_song = "";
              _config2.default.starting_playlist = "";
              _config2.default.starting_playlist_song = "";
              _config2.default.repeat = false;
              _config2.default.shuffle_list = {};
              _config2.default.shuffle_on = false;
              _config2.default.default_album_art = "";
              _config2.default.default_playlist_art = "";
              _config2.default.debug = false;
              _config2.default.volume = 0.5;
              _config2.default.pre_mute_volume = 0.5;
              _config2.default.volume_increment = 5;
              _config2.default.volume_decrement = 5;
              _config2.default.soundcloud_client = "";
              _config2.default.soundcloud_use_art = false;
              _config2.default.soundcloud_song_count = 0;
              _config2.default.soundcloud_songs_ready = 0;
              _config2.default.continue_next = true;
            }
            function setPlayerState() {
              if (_config2.default.audio.paused && _config2.default.audio.currentTime == 0) {
                _config2.default.player_state = "stopped";
              }
              if (_config2.default.audio.paused && _config2.default.audio.currentTime > 0) {
                _config2.default.player_state = "paused";
              }
              if (!_config2.default.audio.paused) {
                _config2.default.player_state = "playing";
              }
            }
            return {
              resetConfig,
              setPlayerState
            };
          }();
          exports2.default = ConfigState;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var MetaDataElements = function() {
            function displayMetaData() {
              var imageMetaDataKeys = ["cover_art_url", "station_art_url", "podcast_episode_cover_art_url"];
              var songInfoElements = document.querySelectorAll("[data-amplitude-song-info]");
              for (var i = 0; i < songInfoElements.length; i++) {
                var info = songInfoElements[i].getAttribute("data-amplitude-song-info");
                var playlist = songInfoElements[i].getAttribute("data-amplitude-playlist");
                var songIndex = songInfoElements[i].getAttribute("data-amplitude-song-index");
                if (songIndex == null && (_config2.default.active_playlist == playlist || playlist == null && songIndex == null)) {
                  var val = _config2.default.active_metadata[info] != void 0 ? _config2.default.active_metadata[info] : null;
                  if (imageMetaDataKeys.indexOf(info) >= 0) {
                    val = val || _config2.default.default_album_art;
                    songInfoElements[i].setAttribute("src", val);
                  } else {
                    val = val || "";
                    songInfoElements[i].innerHTML = val;
                  }
                }
              }
            }
            function displayPlaylistMetaData() {
              var imageMetaDataKeys = ["image_url"];
              var playlistInfoElements = document.querySelectorAll("[data-amplitude-playlist-info]");
              for (var i = 0; i < playlistInfoElements.length; i++) {
                var info = playlistInfoElements[i].getAttribute("data-amplitude-playlist-info");
                var playlist = playlistInfoElements[i].getAttribute("data-amplitude-playlist");
                if (_config2.default.playlists[playlist][info] != void 0) {
                  if (imageMetaDataKeys.indexOf(info) >= 0) {
                    playlistInfoElements[i].setAttribute("src", _config2.default.playlists[playlist][info]);
                  } else {
                    playlistInfoElements[i].innerHTML = _config2.default.playlists[playlist][info];
                  }
                } else {
                  if (imageMetaDataKeys.indexOf(info) >= 0) {
                    if (_config2.default.default_playlist_art != "") {
                      playlistInfoElements[i].setAttribute("src", _config2.default.default_playlist_art);
                    } else {
                      playlistInfoElements[i].setAttribute("src", "");
                    }
                  } else {
                    playlistInfoElements[i].innerHTML = "";
                  }
                }
              }
            }
            function setFirstSongInPlaylist(song, playlist) {
              var imageMetaDataKeys = ["cover_art_url", "station_art_url", "podcast_episode_cover_art_url"];
              var songInfoElements = document.querySelectorAll('[data-amplitude-song-info][data-amplitude-playlist="' + playlist + '"]');
              for (var i = 0; i < songInfoElements.length; i++) {
                var info = songInfoElements[i].getAttribute("data-amplitude-song-info");
                var elementPlaylist = songInfoElements[i].getAttribute("data-amplitude-playlist");
                if (elementPlaylist == playlist) {
                  if (song[info] != void 0) {
                    if (imageMetaDataKeys.indexOf(info) >= 0) {
                      songInfoElements[i].setAttribute("src", song[info]);
                    } else {
                      songInfoElements[i].innerHTML = song[info];
                    }
                  } else {
                    if (imageMetaDataKeys.indexOf(info) >= 0) {
                      if (song.default_album_art != "") {
                        songInfoElements[i].setAttribute("src", song.default_album_art);
                      } else {
                        songInfoElements[i].setAttribute("src", "");
                      }
                    } else {
                      songInfoElements[i].innerHTML = "";
                    }
                  }
                }
              }
            }
            function syncMetaData() {
              var imageMetaDataKeys = ["cover_art_url", "station_art_url", "podcast_episode_cover_art_url"];
              var songInfoElements = document.querySelectorAll("[data-amplitude-song-info]");
              for (var i = 0; i < songInfoElements.length; i++) {
                var songIndex = songInfoElements[i].getAttribute("data-amplitude-song-index");
                var playlist = songInfoElements[i].getAttribute("data-amplitude-playlist");
                if (songIndex != null && playlist == null) {
                  var info = songInfoElements[i].getAttribute("data-amplitude-song-info");
                  var val = _config2.default.songs[songIndex][info] != void 0 ? _config2.default.songs[songIndex][info] : null;
                  if (imageMetaDataKeys.indexOf(info) >= 0) {
                    val = val || _config2.default.default_album_art;
                    songInfoElements[i].setAttribute("src", val);
                  } else {
                    songInfoElements[i].innerHTML = val;
                  }
                }
                if (songIndex != null && playlist != null) {
                  var _info = songInfoElements[i].getAttribute("data-amplitude-song-info");
                  if (_config2.default.playlists[playlist].songs[songIndex][_info] != void 0) {
                    if (imageMetaDataKeys.indexOf(_info) >= 0) {
                      songInfoElements[i].setAttribute("src", _config2.default.playlists[playlist].songs[songIndex][_info]);
                    } else {
                      songInfoElements[i].innerHTML = _config2.default.playlists[playlist].songs[songIndex][_info];
                    }
                  }
                }
              }
              displayPlaylistMetaData();
            }
            return {
              displayMetaData,
              setFirstSongInPlaylist,
              syncMetaData,
              displayPlaylistMetaData
            };
          }();
          exports2.default = MetaDataElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var RepeatElements = function() {
            function syncRepeat() {
              var repeatClasses = document.getElementsByClassName("amplitude-repeat");
              for (var i = 0; i < repeatClasses.length; i++) {
                if (_config2.default.repeat) {
                  repeatClasses[i].classList.add("amplitude-repeat-on");
                  repeatClasses[i].classList.remove("amplitude-repeat-off");
                } else {
                  repeatClasses[i].classList.remove("amplitude-repeat-on");
                  repeatClasses[i].classList.add("amplitude-repeat-off");
                }
              }
            }
            function syncRepeatPlaylist(playlist) {
              var repeatButtons = document.getElementsByClassName("amplitude-repeat");
              for (var i = 0; i < repeatButtons.length; i++) {
                if (repeatButtons[i].getAttribute("data-amplitude-playlist") == playlist) {
                  if (_config2.default.playlists[playlist].repeat) {
                    repeatButtons[i].classList.add("amplitude-repeat-on");
                    repeatButtons[i].classList.remove("amplitude-repeat-off");
                  } else {
                    repeatButtons[i].classList.add("amplitude-repeat-off");
                    repeatButtons[i].classList.remove("amplitude-repeat-on");
                  }
                }
              }
            }
            function syncRepeatSong() {
              var repeatSongClasses = document.getElementsByClassName("amplitude-repeat-song");
              for (var i = 0; i < repeatSongClasses.length; i++) {
                if (_config2.default.repeat_song) {
                  repeatSongClasses[i].classList.add("amplitude-repeat-song-on");
                  repeatSongClasses[i].classList.remove("amplitude-repeat-song-off");
                } else {
                  repeatSongClasses[i].classList.remove("amplitude-repeat-song-on");
                  repeatSongClasses[i].classList.add("amplitude-repeat-song-off");
                }
              }
            }
            return {
              syncRepeat,
              syncRepeatPlaylist,
              syncRepeatSong
            };
          }();
          exports2.default = RepeatElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _debug = __webpack_require__(4);
          var _debug2 = _interopRequireDefault(_debug);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Callbacks = function() {
            function initialize() {
              _config2.default.audio.addEventListener("abort", function() {
                run("abort");
              });
              _config2.default.audio.addEventListener("error", function() {
                run("error");
              });
              _config2.default.audio.addEventListener("loadeddata", function() {
                run("loadeddata");
              });
              _config2.default.audio.addEventListener("loadedmetadata", function() {
                run("loadedmetadata");
              });
              _config2.default.audio.addEventListener("loadstart", function() {
                run("loadstart");
              });
              _config2.default.audio.addEventListener("pause", function() {
                run("pause");
              });
              _config2.default.audio.addEventListener("playing", function() {
                run("playing");
              });
              _config2.default.audio.addEventListener("play", function() {
                run("play");
              });
              _config2.default.audio.addEventListener("progress", function() {
                run("progress");
              });
              _config2.default.audio.addEventListener("ratechange", function() {
                run("ratechange");
              });
              _config2.default.audio.addEventListener("seeked", function() {
                run("seeked");
              });
              _config2.default.audio.addEventListener("seeking", function() {
                run("seeking");
              });
              _config2.default.audio.addEventListener("stalled", function() {
                run("stalled");
              });
              _config2.default.audio.addEventListener("suspend", function() {
                run("suspend");
              });
              _config2.default.audio.addEventListener("timeupdate", function() {
                run("timeupdate");
              });
              _config2.default.audio.addEventListener("volumechange", function() {
                run("volumechange");
              });
              _config2.default.audio.addEventListener("waiting", function() {
                run("waiting");
              });
              _config2.default.audio.addEventListener("canplay", function() {
                run("canplay");
              });
              _config2.default.audio.addEventListener("canplaythrough", function() {
                run("canplaythrough");
              });
              _config2.default.audio.addEventListener("durationchange", function() {
                run("durationchange");
              });
              _config2.default.audio.addEventListener("ended", function() {
                run("ended");
              });
            }
            function run(callbackName) {
              if (_config2.default.callbacks[callbackName]) {
                var callbackFunction = _config2.default.callbacks[callbackName];
                _debug2.default.writeMessage("Running Callback: " + callbackName);
                try {
                  callbackFunction();
                } catch (error) {
                  if (error.message == "CANCEL EVENT") {
                    throw error;
                  } else {
                    _debug2.default.writeMessage("Callback error: " + error.message);
                  }
                }
              }
            }
            return {
              initialize,
              run
            };
          }();
          exports2.default = Callbacks;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var MuteElements = function() {
            function setMuted(state) {
              var muteClasses = document.getElementsByClassName("amplitude-mute");
              for (var i = 0; i < muteClasses.length; i++) {
                if (!state) {
                  muteClasses[i].classList.add("amplitude-not-muted");
                  muteClasses[i].classList.remove("amplitude-muted");
                } else {
                  muteClasses[i].classList.remove("amplitude-not-muted");
                  muteClasses[i].classList.add("amplitude-muted");
                }
              }
            }
            return {
              setMuted
            };
          }();
          exports2.default = MuteElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var VolumeSliderElements = function() {
            function sync() {
              var volumeSliders = document.getElementsByClassName("amplitude-volume-slider");
              for (var i = 0; i < volumeSliders.length; i++) {
                volumeSliders[i].value = _config2.default.audio.volume * 100;
              }
            }
            return {
              sync
            };
          }();
          exports2.default = VolumeSliderElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Repeater = function() {
            function setRepeat(repeat) {
              _config2.default.repeat = repeat;
            }
            function setRepeatPlaylist(repeat, playlist) {
              _config2.default.playlists[playlist].repeat = repeat;
            }
            function setRepeatSong(repeat) {
              _config2.default.repeat_song = repeat;
            }
            return {
              setRepeat,
              setRepeatPlaylist,
              setRepeatSong
            };
          }();
          exports2.default = Repeater;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Shuffler = function() {
            function setShuffle(shuffle) {
              _config2.default.shuffle_on = shuffle;
              if (shuffle) {
                shuffleSongs();
              } else {
                _config2.default.shuffle_list = [];
              }
            }
            function toggleShuffle() {
              if (_config2.default.shuffle_on) {
                _config2.default.shuffle_on = false;
                _config2.default.shuffle_list = [];
              } else {
                _config2.default.shuffle_on = true;
                shuffleSongs();
              }
            }
            function setShufflePlaylist(playlist, shuffle) {
              _config2.default.playlists[playlist].shuffle = shuffle;
              if (_config2.default.playlists[playlist].shuffle) {
                shufflePlaylistSongs(playlist);
              } else {
                _config2.default.playlists[playlist].shuffle_list = [];
              }
            }
            function toggleShufflePlaylist(playlist) {
              if (_config2.default.playlists[playlist].shuffle) {
                _config2.default.playlists[playlist].shuffle = false;
                _config2.default.playlists[playlist].shuffle_list = [];
              } else {
                _config2.default.playlists[playlist].shuffle = true;
                shufflePlaylistSongs(playlist);
              }
            }
            function shuffleSongs() {
              var shuffleTemp = new Array(_config2.default.songs.length);
              for (var i = 0; i < _config2.default.songs.length; i++) {
                shuffleTemp[i] = _config2.default.songs[i];
              }
              for (var _i = _config2.default.songs.length - 1; _i > 0; _i--) {
                var randNum = Math.floor(Math.random() * _config2.default.songs.length + 1);
                shuffleSwap(shuffleTemp, _i, randNum - 1);
              }
              _config2.default.shuffle_list = shuffleTemp;
            }
            function shufflePlaylistSongs(playlist) {
              var shuffleTemp = new Array(_config2.default.playlists[playlist].songs.length);
              for (var i = 0; i < _config2.default.playlists[playlist].songs.length; i++) {
                shuffleTemp[i] = _config2.default.playlists[playlist].songs[i];
              }
              for (var _i2 = _config2.default.playlists[playlist].songs.length - 1; _i2 > 0; _i2--) {
                var randNum = Math.floor(Math.random() * _config2.default.playlists[playlist].songs.length + 1);
                shuffleSwap(shuffleTemp, _i2, randNum - 1);
              }
              _config2.default.playlists[playlist].shuffle_list = shuffleTemp;
            }
            function shuffleSwap(shuffleList, original, random) {
              var temp = shuffleList[original];
              shuffleList[original] = shuffleList[random];
              shuffleList[random] = temp;
            }
            return {
              setShuffle,
              toggleShuffle,
              setShufflePlaylist,
              toggleShufflePlaylist,
              shuffleSongs,
              shufflePlaylistSongs
            };
          }();
          exports2.default = Shuffler;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var SongSliderElements = function() {
            function sync(location, playlist, songIndex) {
              syncMain(location);
              syncPlaylist(location, playlist);
              syncSong(location, songIndex);
              syncSongInPlaylist(location, playlist);
            }
            function syncMain(location) {
              location = !isNaN(location) ? location : 0;
              var mainSongSliders = document.querySelectorAll(".amplitude-song-slider");
              for (var i = 0; i < mainSongSliders.length; i++) {
                var playlist = mainSongSliders[i].getAttribute("data-amplitude-playlist");
                var song = mainSongSliders[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && song == null) {
                  mainSongSliders[i].value = location;
                }
              }
            }
            function syncPlaylist(location, playlist) {
              location = !isNaN(location) ? location : 0;
              var playlistSongSliders = document.querySelectorAll('.amplitude-song-slider[data-amplitude-playlist="' + playlist + '"]');
              for (var i = 0; i < playlistSongSliders.length; i++) {
                var playlistAttribute = playlistSongSliders[i].getAttribute("data-amplitude-playlist");
                var songAttribute = playlistSongSliders[i].getAttribute("data-amplitude-song-index");
                if (playlistAttribute == playlist && songAttribute == null) {
                  playlistSongSliders[i].value = location;
                }
              }
            }
            function syncSong(location, songIndex) {
              if (_config2.default.active_playlist == null) {
                location = !isNaN(location) ? location : 0;
                var songSliders = document.querySelectorAll('.amplitude-song-slider[data-amplitude-song-index="' + songIndex + '"]');
                for (var i = 0; i < songSliders.length; i++) {
                  var playlistAttribute = songSliders[i].getAttribute("data-amplitude-playlist");
                  var songAttribute = songSliders[i].getAttribute("data-amplitude-song-index");
                  if (playlistAttribute == null && songAttribute == songIndex) {
                    songSliders[i].value = location;
                  }
                }
              }
            }
            function syncSongInPlaylist(location, playlist) {
              location = !isNaN(location) ? location : 0;
              var activePlaylistIndex = _config2.default.active_playlist != "" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
              var songInPlaylistSliders = document.querySelectorAll('.amplitude-song-slider[data-amplitude-playlist="' + playlist + '"][data-amplitude-song-index="' + activePlaylistIndex + '"]');
              for (var i = 0; i < songInPlaylistSliders.length; i++) {
                songInPlaylistSliders[i].value = location;
              }
            }
            function resetElements() {
              var songSliders = document.getElementsByClassName("amplitude-song-slider");
              for (var i = 0; i < songSliders.length; i++) {
                songSliders[i].value = 0;
              }
            }
            return {
              sync,
              syncMain,
              syncPlaylist,
              syncSong,
              syncSongInPlaylist,
              resetElements
            };
          }();
          exports2.default = SongSliderElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _currentTimeElements = __webpack_require__(53);
          var _currentTimeElements2 = _interopRequireDefault(_currentTimeElements);
          var _currentHourElements = __webpack_require__(50);
          var _currentHourElements2 = _interopRequireDefault(_currentHourElements);
          var _currentMinuteElements = __webpack_require__(51);
          var _currentMinuteElements2 = _interopRequireDefault(_currentMinuteElements);
          var _currentSecondElements = __webpack_require__(52);
          var _currentSecondElements2 = _interopRequireDefault(_currentSecondElements);
          var _durationCountDownTimeElements = __webpack_require__(54);
          var _durationCountDownTimeElements2 = _interopRequireDefault(_durationCountDownTimeElements);
          var _durationHourElements = __webpack_require__(55);
          var _durationHourElements2 = _interopRequireDefault(_durationHourElements);
          var _durationMinuteElements = __webpack_require__(56);
          var _durationMinuteElements2 = _interopRequireDefault(_durationMinuteElements);
          var _durationSecondElements = __webpack_require__(57);
          var _durationSecondElements2 = _interopRequireDefault(_durationSecondElements);
          var _durationTimeElements = __webpack_require__(58);
          var _durationTimeElements2 = _interopRequireDefault(_durationTimeElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var TimeElements = function() {
            function resetCurrentTimes() {
              _currentTimeElements2.default.resetTimes();
              _currentHourElements2.default.resetTimes();
              _currentMinuteElements2.default.resetTimes();
              _currentSecondElements2.default.resetTimes();
            }
            function syncCurrentTimes(currentTime) {
              _currentTimeElements2.default.sync(currentTime);
              _currentHourElements2.default.sync(currentTime.hours);
              _currentMinuteElements2.default.sync(currentTime.minutes);
              _currentSecondElements2.default.sync(currentTime.seconds);
            }
            function resetDurationTimes() {
              _durationCountDownTimeElements2.default.resetTimes();
              _durationHourElements2.default.resetTimes();
              _durationMinuteElements2.default.resetTimes();
              _durationSecondElements2.default.resetTimes();
              _durationTimeElements2.default.resetTimes();
            }
            function syncDurationTimes(currentTime, songDuration) {
              _durationCountDownTimeElements2.default.sync(currentTime, songDuration);
              _durationTimeElements2.default.sync(songDuration);
              _durationHourElements2.default.sync(songDuration.hours);
              _durationMinuteElements2.default.sync(songDuration.minutes);
              _durationSecondElements2.default.sync(songDuration.seconds);
            }
            return {
              resetCurrentTimes,
              syncCurrentTimes,
              resetDurationTimes,
              syncDurationTimes
            };
          }();
          exports2.default = TimeElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _debug = __webpack_require__(4);
          var _debug2 = _interopRequireDefault(_debug);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Visualizations = function() {
            function run() {
              var visualizationElements = document.querySelectorAll(".amplitude-visualization");
              if (_config2.default.web_audio_api_available) {
                if (Object.keys(_config2.default.visualizations.available).length > 0 && visualizationElements.length > 0) {
                  for (var i = 0; i < visualizationElements.length; i++) {
                    var playlist = visualizationElements[i].getAttribute("data-amplitude-playlist");
                    var song = visualizationElements[i].getAttribute("data-amplitude-song-index");
                    if (playlist == null && song == null) {
                      runGlobalVisualization(visualizationElements[i]);
                    }
                    if (playlist != null && song == null) {
                      runPlaylistVisualization(visualizationElements[i], playlist);
                    }
                    if (playlist == null && song != null) {
                      runSongVisualization(visualizationElements[i], song);
                    }
                    if (playlist != null && song != null) {
                      runSongInPlaylistVisualization(visualizationElements[i], playlist, song);
                    }
                  }
                }
              } else {
                displayBackups();
              }
            }
            function runGlobalVisualization(element) {
              var globalVisualizationIndex = _config2.default.visualization;
              var activeSongVisualizationIndex = _config2.default.active_index != null ? _config2.default.songs[_config2.default.active_index].visualization : _config2.default.playlists[_config2.default.active_playlist].songs[_config2.default.playlists[_config2.default.active_playlist].active_index].visualization;
              if (activeSongVisualizationIndex != void 0 && _config2.default.visualizations.available[activeSongVisualizationIndex] != void 0) {
                addToActiveVisualizations(activeSongVisualizationIndex, element);
              } else if (globalVisualizationIndex != void 0 && _config2.default.visualizations.available[globalVisualizationIndex] != void 0) {
                addToActiveVisualizations(globalVisualizationIndex, element);
              } else {
                var firstVisualization = Object.keys(_config2.default.visualizations.available).length > 0 ? Object.keys(_config2.default.visualizations.available)[0] : null;
                if (firstVisualization != null) {
                  addToActiveVisualizations(firstVisualization, element);
                }
              }
            }
            function runPlaylistVisualization(element, playlist) {
              if (playlist == _config2.default.active_playlist) {
                var activeSongVisualizationIndex = _config2.default.playlists[_config2.default.active_playlist].songs[_config2.default.playlists[_config2.default.active_playlist].active_index].visualization;
                var activePlaylistVisualizationIndex = _config2.default.playlists[_config2.default.active_playlist].visualization;
                var globalVisualizationIndex = _config2.default.visualization;
                if (activeSongVisualizationIndex != void 0 && _config2.default.visualizations.available[activeSongVisualizationIndex] != void 0) {
                  addToActiveVisualizations(activeSongVisualizationIndex, element);
                } else if (activePlaylistVisualizationIndex != void 0 && _config2.default.visualizations.available[activePlaylistVisualizationIndex] != void 0) {
                  addToActiveVisualizations(activePlaylistVisualizationIndex, element);
                } else if (globalVisualizationIndex != void 0 && _config2.default.visualizations.available[globalVisualizationIndex] != void 0) {
                  addToActiveVisualizations(globalVisualizationIndex, element);
                } else {
                  var firstVisualization = Object.keys(_config2.default.visualizations.available).length > 0 ? Object.keys(_config2.default.visualizations.available)[0] : null;
                  if (firstVisualization != null) {
                    addToActiveVisualizations(firstVisualization, element);
                  }
                }
              }
            }
            function runSongVisualization(element, song) {
              if (song == _config2.default.active_index) {
                var activeSongVisualizationIndex = _config2.default.songs[_config2.default.active_index].visualization;
                var globalVisualizationIndex = _config2.default.visualization;
                if (activeSongVisualizationIndex != void 0 && _config2.default.visualizations.available[activeSongVisualizationIndex] != void 0) {
                  addToActiveVisualizations(activeSongVisualizationIndex, element);
                } else if (globalVisualizationIndex != void 0 && _config2.default.visualizations.available[globalVisualizationIndex] != void 0) {
                  addToActiveVisualizations(globalVisualizationIndex, element);
                } else {
                  var firstVisualization = Object.keys(_config2.default.visualizations.available).length > 0 ? Object.keys(_config2.default.visualizations.available)[0] : null;
                  if (firstVisualization != null) {
                    addToActiveVisualizations(firstVisualization, element);
                  }
                }
              }
            }
            function runSongInPlaylistVisualization(element, playlist, song) {
              if (playlist == _config2.default.active_playlist && _config2.default.playlists[playlist].active_index == song) {
                var activeSongVisualizationIndex = _config2.default.playlists[_config2.default.active_playlist].songs[_config2.default.playlists[_config2.default.active_playlist].active_index].visualization;
                var activePlaylistVisualizationIndex = _config2.default.playlists[_config2.default.active_playlist].visualization;
                var globalVisualizationIndex = _config2.default.visualization;
                if (activeSongVisualizationIndex != void 0 && _config2.default.visualizations.available[activeSongVisualizationIndex] != void 0) {
                  addToActiveVisualizations(activeSongVisualizationIndex, element);
                } else if (activePlaylistVisualizationIndex != void 0 && _config2.default.visualizations.available[activePlaylistVisualizationIndex] != void 0) {
                  addToActiveVisualizations(activePlaylistVisualizationIndex, element);
                } else if (globalVisualizationIndex != void 0 && _config2.default.visualizations.available[globalVisualizationIndex] != void 0) {
                  addToActiveVisualizations(globalVisualizationIndex, element);
                } else {
                  var firstVisualization = Object.keys(_config2.default.visualizations.available).length > 0 ? Object.keys(_config2.default.visualizations.available)[0] : null;
                  if (firstVisualization != null) {
                    addToActiveVisualizations(firstVisualization, element);
                  }
                }
              }
            }
            function addToActiveVisualizations(key, element) {
              var visualization = new _config2.default.visualizations.available[key]["object"]();
              visualization.setPreferences(_config2.default.visualizations.available[key]["preferences"]);
              visualization.startVisualization(element);
              _config2.default.visualizations.active.push(visualization);
            }
            function stop() {
              for (var i = 0; i < _config2.default.visualizations.active.length; i++) {
                _config2.default.visualizations.active[i].stopVisualization();
              }
              _config2.default.visualizations.active = [];
            }
            function register(visualization, preferences) {
              var newVisualization = new visualization();
              _config2.default.visualizations.available[newVisualization.getID()] = new Array();
              _config2.default.visualizations.available[newVisualization.getID()]["object"] = visualization;
              _config2.default.visualizations.available[newVisualization.getID()]["preferences"] = preferences;
            }
            function displayBackups() {
              var visualizationElements = document.querySelectorAll(".amplitude-visualization");
              if (visualizationElements.length > 0) {
                for (var x = 0; x < visualizationElements.length; x++) {
                  var playlist = visualizationElements[x].getAttribute("data-amplitude-playlist");
                  var song = visualizationElements[x].getAttribute("data-amplitude-song-index");
                  if (playlist == null && song == null) {
                    displayGlobalBackup(visualizationElements[x]);
                  }
                  if (playlist != null && song == null) {
                    displayPlaylistBackup(visualizationElements[x], playlist);
                  }
                  if (playlist == null && song != null) {
                    displaySongBackup(visualizationElements[x], song);
                  }
                  if (playlist != null && song != null) {
                    displaySongInPlaylistBackup(visualizationElements[x], playlist, song);
                  }
                }
              }
            }
            function displayGlobalBackup(element) {
              element.style.backgroundImage = "url(" + _config2.default.active_metadata.cover_art_url + ")";
            }
            function displayPlaylistBackup(element, playlist) {
              if (_config2.default.active_playlist == playlist) {
                element.style.backgroundImage = "url(" + _config2.default.active_metadata.cover_art_url + ")";
              }
            }
            function displaySongBackup(element, song) {
              if (_config2.default.active_index == song) {
                element.style.backgroundImage = "url(" + _config2.default.active_metadata.cover_art_url + ")";
              }
            }
            function displaySongInPlaylistBackup(element, playlist, song) {
              if (_config2.default.active_playlist == playlist && _config2.default.playlists[active_playlist].active_index == song) {
                element.style.backgroundImage = "url(" + _config2.default.active_metadata.cover_art_url + ")";
              }
            }
            return {
              run,
              stop,
              register
            };
          }();
          exports2.default = Visualizations;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _init = __webpack_require__(21);
          var _init2 = _interopRequireDefault(_init);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var SoundCloud = function() {
            var tempUserConfig = {};
            function loadSoundCloud(userConfig) {
              tempUserConfig = userConfig;
              var head = document.getElementsByTagName("head")[0];
              var script = document.createElement("script");
              script.type = "text/javascript";
              script.src = "https://connect.soundcloud.com/sdk.js";
              script.onreadystatechange = initSoundcloud;
              script.onload = initSoundcloud;
              head.appendChild(script);
            }
            function initSoundcloud() {
              SC.initialize({
                client_id: _config2.default.soundcloud_client
              });
              getStreamableURLs();
            }
            function getStreamableURLs() {
              var soundcloud_regex = /^https?:\/\/(soundcloud.com|snd.sc)\/(.*)$/;
              for (var i = 0; i < _config2.default.songs.length; i++) {
                if (_config2.default.songs[i].url.match(soundcloud_regex)) {
                  _config2.default.soundcloud_song_count++;
                  resolveStreamable(_config2.default.songs[i].url, i);
                }
              }
            }
            function resolveIndividualStreamableURL(url, playlist, index) {
              var addToShuffleList = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
              SC.get("/resolve/?url=" + url, function(sound) {
                if (sound.streamable) {
                  if (playlist != null) {
                    _config2.default.playlists[playlist].songs[index].url = sound.stream_url + "?client_id=" + _config2.default.soundcloud_client;
                    if (addToShuffleList) {
                      _config2.default.playlists[playlist].shuffle_list[index].url = sound.stream_url + "?client_id=" + _config2.default.soundcloud_client;
                    }
                    if (_config2.default.soundcloud_use_art) {
                      _config2.default.playlists[playlist].songs[index].cover_art_url = sound.artwork_url;
                      if (addToShuffleList) {
                        _config2.default.playlists[playlist].shuffle_list[index].cover_art_url = sound.artwork_url;
                      }
                    }
                    _config2.default.playlists[playlist].songs[index].soundcloud_data = sound;
                    if (addToShuffleList) {
                      _config2.default.playlists[playlist].shuffle_list[index].soundcloud_data = sound;
                    }
                  } else {
                    _config2.default.songs[index].url = sound.stream_url + "?client_id=" + _config2.default.soundcloud_client;
                    if (addToShuffleList) {
                      _config2.default.shuffle_list[index].stream_url + "?client_id=" + _config2.default.soundcloud_client;
                    }
                    if (_config2.default.soundcloud_use_art) {
                      _config2.default.songs[index].cover_art_url = sound.artwork_url;
                      if (addToShuffleList) {
                        _config2.default.shuffle_list[index].cover_art_url = sound.artwork_url;
                      }
                    }
                    _config2.default.songs[index].soundcloud_data = sound;
                    if (addToShuffleList) {
                      _config2.default.shuffle_list[index].soundcloud_data = sound;
                    }
                  }
                } else {
                  if (playlist != null) {
                    AmplitudeHelpers.writeDebugMessage(_config2.default.playlists[playlist].songs[index].name + " by " + _config2.default.playlists[playlist].songs[index].artist + " is not streamable by the Soundcloud API");
                  } else {
                    AmplitudeHelpers.writeDebugMessage(_config2.default.songs[index].name + " by " + _config2.default.songs[index].artist + " is not streamable by the Soundcloud API");
                  }
                }
              });
            }
            function resolveStreamable(url, index) {
              SC.get("/resolve/?url=" + url, function(sound) {
                if (sound.streamable) {
                  _config2.default.songs[index].url = sound.stream_url + "?client_id=" + _config2.default.soundcloud_client;
                  if (_config2.default.soundcloud_use_art) {
                    _config2.default.songs[index].cover_art_url = sound.artwork_url;
                  }
                  _config2.default.songs[index].soundcloud_data = sound;
                } else {
                  AmplitudeHelpers.writeDebugMessage(_config2.default.songs[index].name + " by " + _config2.default.songs[index].artist + " is not streamable by the Soundcloud API");
                }
                _config2.default.soundcloud_songs_ready++;
                if (_config2.default.soundcloud_songs_ready == _config2.default.soundcloud_song_count) {
                  _init2.default.setConfig(tempUserConfig);
                }
              });
            }
            function isSoundCloudURL(url) {
              var soundcloud_regex = /^https?:\/\/(soundcloud.com|snd.sc)\/(.*)$/;
              return url.match(soundcloud_regex);
            }
            return {
              loadSoundCloud,
              resolveIndividualStreamableURL,
              isSoundCloudURL
            };
          }();
          exports2.default = SoundCloud;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var PlaybackSpeedElements = function() {
            function sync() {
              var playbackSpeedClasses = document.getElementsByClassName("amplitude-playback-speed");
              for (var i = 0; i < playbackSpeedClasses.length; i++) {
                playbackSpeedClasses[i].classList.remove("amplitude-playback-speed-10");
                playbackSpeedClasses[i].classList.remove("amplitude-playback-speed-15");
                playbackSpeedClasses[i].classList.remove("amplitude-playback-speed-20");
                switch (_config2.default.playback_speed) {
                  case 1:
                    playbackSpeedClasses[i].classList.add("amplitude-playback-speed-10");
                    break;
                  case 1.5:
                    playbackSpeedClasses[i].classList.add("amplitude-playback-speed-15");
                    break;
                  case 2:
                    playbackSpeedClasses[i].classList.add("amplitude-playback-speed-20");
                    break;
                }
              }
            }
            return {
              sync
            };
          }();
          exports2.default = PlaybackSpeedElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var ShuffleElements = function() {
            function syncMain() {
              var shuffleButtons = document.getElementsByClassName("amplitude-shuffle");
              for (var i = 0; i < shuffleButtons.length; i++) {
                if (shuffleButtons[i].getAttribute("data-amplitude-playlist") == null) {
                  if (_config2.default.shuffle_on) {
                    shuffleButtons[i].classList.add("amplitude-shuffle-on");
                    shuffleButtons[i].classList.remove("amplitude-shuffle-off");
                  } else {
                    shuffleButtons[i].classList.add("amplitude-shuffle-off");
                    shuffleButtons[i].classList.remove("amplitude-shuffle-on");
                  }
                }
              }
            }
            function syncPlaylist(playlist) {
              var shuffleButtons = document.querySelectorAll('.amplitude-shuffle[data-amplitude-playlist="' + playlist + '"]');
              for (var i = 0; i < shuffleButtons.length; i++) {
                if (_config2.default.playlists[playlist].shuffle) {
                  shuffleButtons[i].classList.add("amplitude-shuffle-on");
                  shuffleButtons[i].classList.remove("amplitude-shuffle-off");
                } else {
                  shuffleButtons[i].classList.add("amplitude-shuffle-off");
                  shuffleButtons[i].classList.remove("amplitude-shuffle-on");
                }
              }
            }
            return {
              syncMain,
              syncPlaylist
            };
          }();
          exports2.default = ShuffleElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var SongPlayedProgressElements = function() {
            function sync(songPlayedPercentage) {
              syncGlobal(songPlayedPercentage);
              syncPlaylist(songPlayedPercentage);
              syncSong(songPlayedPercentage);
              syncSongInPlaylist(songPlayedPercentage);
            }
            function syncGlobal(percentage) {
              if (!isNaN(percentage)) {
                var songPlayedProgressBars = document.querySelectorAll(".amplitude-song-played-progress");
                for (var i = 0; i < songPlayedProgressBars.length; i++) {
                  var playlist = songPlayedProgressBars[i].getAttribute("data-amplitude-playlist");
                  var songIndex = songPlayedProgressBars[i].getAttribute("data-amplitude-song-index");
                  if (playlist == null && songIndex == null) {
                    var max = songPlayedProgressBars[i].max;
                    songPlayedProgressBars[i].value = percentage / 100 * max;
                  }
                }
              }
            }
            function syncPlaylist(percentage) {
              if (!isNaN(percentage)) {
                var songPlayedProgressBars = document.querySelectorAll('.amplitude-song-played-progress[data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
                for (var i = 0; i < songPlayedProgressBars.length; i++) {
                  var song = songPlayedProgressBars[i].getAttribute("data-amplitude-song-index");
                  if (song == null) {
                    var max = songPlayedProgressBars[i].max;
                    songPlayedProgressBars[i].value = percentage / 100 * max;
                  }
                }
              }
            }
            function syncSong(percentage) {
              if (_config2.default.active_playlist == null) {
                if (!isNaN(percentage)) {
                  var songPlayedProgressBars = document.querySelectorAll('.amplitude-song-played-progress[data-amplitude-song-index="' + _config2.default.active_index + '"]');
                  for (var i = 0; i < songPlayedProgressBars.length; i++) {
                    var playlist = songPlayedProgressBars[i].getAttribute("data-amplitude-playlist");
                    if (playlist == null) {
                      var max = songPlayedProgressBars[i].max;
                      songPlayedProgressBars[i].value = percentage / 100 * max;
                    }
                  }
                }
              }
            }
            function syncSongInPlaylist(percentage) {
              if (!isNaN(percentage)) {
                var activePlaylistIndex = _config2.default.active_playlist != "" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
                var songPlayedProgressBars = document.querySelectorAll('.amplitude-song-played-progress[data-amplitude-playlist="' + _config2.default.active_playlist + '"][data-amplitude-song-index="' + activePlaylistIndex + '"]');
                for (var i = 0; i < songPlayedProgressBars.length; i++) {
                  var playlist = songPlayedProgressBars[i].getAttribute("data-amplitude-playlist");
                  var songIndex = songPlayedProgressBars[i].getAttribute("data-amplitude-song-index");
                  if (playlist != null && songIndex != null) {
                    var max = songPlayedProgressBars[i].max;
                    songPlayedProgressBars[i].value = percentage / 100 * max;
                  }
                }
              }
            }
            function resetElements() {
              var songPlayedProgressBars = document.getElementsByClassName("amplitude-song-played-progress");
              for (var i = 0; i < songPlayedProgressBars.length; i++) {
                songPlayedProgressBars[i].value = 0;
              }
            }
            return {
              sync,
              resetElements
            };
          }();
          exports2.default = SongPlayedProgressElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _soundcloud = __webpack_require__(17);
          var _soundcloud2 = _interopRequireDefault(_soundcloud);
          var _configState = __webpack_require__(6);
          var _configState2 = _interopRequireDefault(_configState);
          var _debug = __webpack_require__(4);
          var _debug2 = _interopRequireDefault(_debug);
          var _checks = __webpack_require__(5);
          var _checks2 = _interopRequireDefault(_checks);
          var _shuffler = __webpack_require__(13);
          var _shuffler2 = _interopRequireDefault(_shuffler);
          var _events = __webpack_require__(26);
          var _events2 = _interopRequireDefault(_events);
          var _fx = __webpack_require__(46);
          var _fx2 = _interopRequireDefault(_fx);
          var _visualizations = __webpack_require__(16);
          var _visualizations2 = _interopRequireDefault(_visualizations);
          var _waveform = __webpack_require__(22);
          var _waveform2 = _interopRequireDefault(_waveform);
          var _audioNavigation = __webpack_require__(3);
          var _audioNavigation2 = _interopRequireDefault(_audioNavigation);
          var _callbacks = __webpack_require__(9);
          var _callbacks2 = _interopRequireDefault(_callbacks);
          var _playlists = __webpack_require__(48);
          var _playlists2 = _interopRequireDefault(_playlists);
          var _shuffleElements = __webpack_require__(19);
          var _shuffleElements2 = _interopRequireDefault(_shuffleElements);
          var _muteElements = __webpack_require__(10);
          var _muteElements2 = _interopRequireDefault(_muteElements);
          var _volumeSliderElements = __webpack_require__(11);
          var _volumeSliderElements2 = _interopRequireDefault(_volumeSliderElements);
          var _timeElements = __webpack_require__(15);
          var _timeElements2 = _interopRequireDefault(_timeElements);
          var _playPauseElements = __webpack_require__(2);
          var _playPauseElements2 = _interopRequireDefault(_playPauseElements);
          var _metaDataElements = __webpack_require__(7);
          var _metaDataElements2 = _interopRequireDefault(_metaDataElements);
          var _playbackSpeedElements = __webpack_require__(18);
          var _playbackSpeedElements2 = _interopRequireDefault(_playbackSpeedElements);
          var _repeatElements = __webpack_require__(8);
          var _repeatElements2 = _interopRequireDefault(_repeatElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Initializer = function() {
            function initialize(userConfig) {
              var ready = false;
              _configState2.default.resetConfig();
              _events2.default.initialize();
              _callbacks2.default.initialize();
              _config2.default.debug = userConfig.debug != void 0 ? userConfig.debug : false;
              setArt(userConfig);
              if (userConfig.songs) {
                if (userConfig.songs.length != 0) {
                  _config2.default.songs = userConfig.songs;
                  ready = true;
                } else {
                  _debug2.default.writeMessage("Please add some songs, to your songs object!");
                }
              } else {
                _debug2.default.writeMessage("Please provide a songs object for AmplitudeJS to run!");
              }
              if (_fx2.default.webAudioAPIAvailable()) {
                if (_fx2.default.determineUsingAnyFX()) {
                  _fx2.default.configureWebAudioAPI();
                  document.documentElement.addEventListener("mousedown", function() {
                    if (_config2.default.context.state !== "running") {
                      _config2.default.context.resume();
                    }
                  });
                  document.documentElement.addEventListener("keydown", function() {
                    if (_config2.default.context.state !== "running") {
                      _config2.default.context.resume();
                    }
                  });
                  document.documentElement.addEventListener("keyup", function() {
                    if (_config2.default.context.state !== "running") {
                      _config2.default.context.resume();
                    }
                  });
                  if (userConfig.waveforms != void 0 && userConfig.waveforms.sample_rate != void 0) {
                    _config2.default.waveforms.sample_rate = userConfig.waveforms.sample_rate;
                  }
                  _waveform2.default.init();
                  if (userConfig.visualizations != void 0 && userConfig.visualizations.length > 0) {
                    for (var i = 0; i < userConfig.visualizations.length; i++) {
                      _visualizations2.default.register(userConfig.visualizations[i].object, userConfig.visualizations[i].params);
                    }
                  }
                }
              } else {
                _debug2.default.writeMessage("The Web Audio API is not available on this platform. We are using your defined backups!");
              }
              initializeDefaultLiveSettings();
              initializeDefaultSongIndexes();
              if (ready) {
                _config2.default.soundcloud_client = userConfig.soundcloud_client != void 0 ? userConfig.soundcloud_client : "";
                _config2.default.soundcloud_use_art = userConfig.soundcloud_use_art != void 0 ? userConfig.soundcloud_use_art : "";
                var tempUserConfig = {};
                if (_config2.default.soundcloud_client != "") {
                  tempUserConfig = userConfig;
                  _soundcloud2.default.loadSoundCloud(tempUserConfig);
                } else {
                  setConfig(userConfig);
                }
              }
              _debug2.default.writeMessage("Initialized With: ");
              _debug2.default.writeMessage(_config2.default);
            }
            function rebindDisplay() {
              _events2.default.initialize();
              _metaDataElements2.default.displayMetaData();
            }
            function setConfig(userConfig) {
              if (userConfig.playlists && countPlaylists(userConfig.playlists) > 0) {
                _playlists2.default.initialize(userConfig.playlists);
              }
              if (userConfig.start_song != void 0 && !userConfig.starting_playlist) {
                if (_checks2.default.isInt(userConfig.start_song)) {
                  _audioNavigation2.default.changeSong(_config2.default.songs[userConfig.start_song], userConfig.start_song);
                } else {
                  _debug2.default.writeMessage("You must enter an integer index for the start song.");
                }
              } else {
                _audioNavigation2.default.changeSong(_config2.default.songs[0], 0);
              }
              if (userConfig.shuffle_on != void 0 && userConfig.shuffle_on) {
                _config2.default.shuffle_on = true;
                _shuffler2.default.shuffleSongs();
                _audioNavigation2.default.changeSong(_config2.default.shuffle_list[0], 0);
              }
              _config2.default.continue_next = userConfig.continue_next != void 0 ? userConfig.continue_next : true;
              _config2.default.playback_speed = userConfig.playback_speed != void 0 ? userConfig.playback_speed : 1;
              _core2.default.setPlaybackSpeed(_config2.default.playback_speed);
              _config2.default.audio.preload = userConfig.preload != void 0 ? userConfig.preload : "auto";
              _config2.default.callbacks = userConfig.callbacks != void 0 ? userConfig.callbacks : {};
              _config2.default.bindings = userConfig.bindings != void 0 ? userConfig.bindings : {};
              _config2.default.volume = userConfig.volume != void 0 ? userConfig.volume : 50;
              _config2.default.delay = userConfig.delay != void 0 ? userConfig.delay : 0;
              _config2.default.volume_increment = userConfig.volume_increment != void 0 ? userConfig.volume_increment : 5;
              _config2.default.volume_decrement = userConfig.volume_decrement != void 0 ? userConfig.volume_decrement : 5;
              _core2.default.setVolume(_config2.default.volume);
              setArt(userConfig);
              initializeElements();
              if (userConfig.starting_playlist != void 0 && userConfig.starting_playlist != "") {
                _config2.default.active_playlist = userConfig.starting_playlist;
                if (userConfig.starting_playlist_song != void 0 && userConfig.starting_playlist_song != "") {
                  if (_typeof(userConfig.playlists[userConfig.starting_playlist].songs[parseInt(userConfig.starting_playlist_song)]) != void 0) {
                    _audioNavigation2.default.changeSongPlaylist(_config2.default.active_playlist, userConfig.playlists[userConfig.starting_playlist].songs[parseInt(userConfig.starting_playlist_song)], parseInt(userConfig.starting_playlist_song));
                  } else {
                    _audioNavigation2.default.changeSongPlaylist(_config2.default.active_playlist, userConfig.playlists[userConfig.starting_playlist].songs[0], 0);
                    _debug2.default.writeMessage("The index of " + userConfig.starting_playlist_song + " does not exist in the playlist " + userConfig.starting_playlist);
                  }
                } else {
                  _audioNavigation2.default.changeSong(_config2.default.active_playlist, userConfig.playlists[userConfig.starting_playlist].songs[0], 0);
                }
                _playPauseElements2.default.sync();
              }
              _callbacks2.default.run("initialized");
            }
            function setArt(userConfig) {
              if (userConfig.default_album_art != void 0) {
                _config2.default.default_album_art = userConfig.default_album_art;
              } else {
                _config2.default.default_album_art = "";
              }
              if (userConfig.default_playlist_art != void 0) {
                _config2.default.default_playlist_art = userConfig.default_playlist_art;
              } else {
                _config2.default.default_playlist_art = "";
              }
            }
            function initializeElements() {
              _shuffleElements2.default.syncMain();
              _muteElements2.default.setMuted(_config2.default.volume == 0 ? true : false);
              _volumeSliderElements2.default.sync();
              _playbackSpeedElements2.default.sync();
              _timeElements2.default.resetCurrentTimes();
              _playPauseElements2.default.syncToPause();
              _metaDataElements2.default.syncMetaData();
              _repeatElements2.default.syncRepeatSong();
            }
            function countPlaylists(playlists) {
              var size = 0, key = void 0;
              for (key in playlists) {
                if (playlists.hasOwnProperty(key)) {
                  size++;
                }
              }
              _debug2.default.writeMessage("You have " + size + " playlist(s) in your config");
              return size;
            }
            function initializeDefaultLiveSettings() {
              for (var i = 0; i < _config2.default.songs.length; i++) {
                if (_config2.default.songs[i].live == void 0) {
                  _config2.default.songs[i].live = false;
                }
              }
            }
            function initializeDefaultSongIndexes() {
              for (var i = 0; i < _config2.default.songs.length; i++) {
                _config2.default.songs[i].index = i;
              }
            }
            return {
              initialize,
              setConfig,
              rebindDisplay
            };
          }();
          exports2.default = Initializer;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var WaveForm = function() {
            var buffer = "";
            var sampleRate = "";
            var peaks = "";
            function init() {
              sampleRate = _config2.default.waveforms.sample_rate;
              var waveforms = document.querySelectorAll(".amplitude-wave-form");
              if (waveforms.length > 0) {
                for (var i = 0; i < waveforms.length; i++) {
                  waveforms[i].innerHTML = "";
                  var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
                  svg.setAttribute("viewBox", "0 -1 " + sampleRate + " 2");
                  svg.setAttribute("preserveAspectRatio", "none");
                  var g = document.createElementNS("http://www.w3.org/2000/svg", "g");
                  svg.appendChild(g);
                  var path = document.createElementNS("http://www.w3.org/2000/svg", "path");
                  path.setAttribute("d", "");
                  path.setAttribute("id", "waveform");
                  g.appendChild(path);
                  waveforms[i].appendChild(svg);
                }
              }
            }
            function build() {
              if (_config2.default.web_audio_api_available) {
                if (_config2.default.waveforms.built[Math.abs(_config2.default.audio.src.split("").reduce(function(a, b) {
                  a = (a << 5) - a + b.charCodeAt(0);
                  return a & a;
                }, 0))] == void 0) {
                  var req = new XMLHttpRequest();
                  req.open("GET", _config2.default.audio.src, true);
                  req.responseType = "arraybuffer";
                  req.onreadystatechange = function(e) {
                    if (req.readyState == 4) {
                      if (req.status == 200) {
                        _config2.default.context.decodeAudioData(req.response, function(bufferedAudio) {
                          buffer = bufferedAudio;
                          peaks = getPeaks(sampleRate, buffer);
                          process(sampleRate, buffer, peaks);
                        });
                      }
                    }
                  };
                  req.send();
                } else {
                  displayWaveForms(_config2.default.waveforms.built[Math.abs(_config2.default.audio.src.split("").reduce(function(a, b) {
                    a = (a << 5) - a + b.charCodeAt(0);
                    return a & a;
                  }, 0))]);
                }
              }
            }
            function process(sampleRate2, buffer2, peaks2) {
              if (buffer2) {
                var totalPeaks = peaks2.length;
                var d = "";
                for (var peakNumber = 0; peakNumber < totalPeaks; peakNumber++) {
                  if (peakNumber % 2 === 0) {
                    d += " M" + ~~(peakNumber / 2) + ", " + peaks2.shift();
                  } else {
                    d += " L" + ~~(peakNumber / 2) + ", " + peaks2.shift();
                  }
                }
                _config2.default.waveforms.built[Math.abs(_config2.default.audio.src.split("").reduce(function(a, b) {
                  a = (a << 5) - a + b.charCodeAt(0);
                  return a & a;
                }, 0))] = d;
                displayWaveForms(_config2.default.waveforms.built[Math.abs(_config2.default.audio.src.split("").reduce(function(a, b) {
                  a = (a << 5) - a + b.charCodeAt(0);
                  return a & a;
                }, 0))]);
              }
            }
            function getPeaks(length, buffer2) {
              var sampleSize = buffer2.length / length;
              var sampleStep = ~~(sampleSize / 10) || 1;
              var numberOfChannels = buffer2.numberOfChannels;
              var mergedPeaks = [];
              for (var channelNumber = 0; channelNumber < numberOfChannels; channelNumber++) {
                var _peaks = [];
                var channelData = buffer2.getChannelData(channelNumber);
                for (var peakNumber = 0; peakNumber < length; peakNumber++) {
                  var start = ~~(peakNumber * sampleSize);
                  var end = ~~(start + sampleSize);
                  var min = channelData[0];
                  var max = channelData[0];
                  for (var sampleIndex = start; sampleIndex < end; sampleIndex += sampleStep) {
                    var value = channelData[sampleIndex];
                    if (value > max) {
                      max = value;
                    }
                    if (value < min) {
                      min = value;
                    }
                  }
                  _peaks[2 * peakNumber] = max;
                  _peaks[2 * peakNumber + 1] = min;
                  if (channelNumber === 0 || max > mergedPeaks[2 * peakNumber]) {
                    mergedPeaks[2 * peakNumber] = max;
                  }
                  if (channelNumber === 0 || min < mergedPeaks[2 * peakNumber + 1]) {
                    mergedPeaks[2 * peakNumber + 1] = min;
                  }
                }
              }
              return mergedPeaks;
            }
            function displayWaveForms(svg) {
              var waveformElements = document.querySelectorAll(".amplitude-wave-form");
              for (var i = 0; i < waveformElements.length; i++) {
                var playlist = waveformElements[i].getAttribute("data-amplitude-playlist");
                var song = waveformElements[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && song == null) {
                  displayGlobalWaveform(waveformElements[i], svg);
                }
                if (playlist != null && song == null) {
                  displayPlaylistWaveform(waveformElements[i], svg, playlist);
                }
                if (playlist == null && song != null) {
                  displaySongWaveform(waveformElements[i], svg, song);
                }
                if (playlist != null && song != null) {
                  displaySongInPlaylistWaveform(waveformElements[i], svg, playlist, song);
                }
              }
            }
            function displayGlobalWaveform(element, svg) {
              var waveformPath = element.querySelector("svg g path");
              waveformPath.setAttribute("d", svg);
            }
            function displayPlaylistWaveform(element, svg, playlist) {
              if (_config2.default.active_playlist == playlist) {
                var waveformPath = element.querySelector("svg g path");
                waveformPath.setAttribute("d", svg);
              }
            }
            function displaySongWaveform(element, svg, song) {
              if (_config2.default.active_index == song) {
                var waveformPath = element.querySelector("svg g path");
                waveformPath.setAttribute("d", svg);
              }
            }
            function displaySongInPlaylistWaveform(element, svg, playlist, song) {
              if (_config2.default.active_playlist == playlist && _config2.default.playlists[_config2.default.active_playlist].active_index == song) {
                var waveformPath = element.querySelector("svg g path");
                waveformPath.setAttribute("d", svg);
              }
            }
            function determineIfUsingWaveforms() {
              var waveforms = document.querySelectorAll(".amplitude-wave-form");
              if (waveforms.length > 0) {
                return true;
              } else {
                return false;
              }
            }
            return {
              init,
              build,
              determineIfUsingWaveforms
            };
          }();
          exports2.default = WaveForm;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Time = function() {
            function computeCurrentTimes() {
              var currentTime = {};
              var currentSeconds = (Math.floor(_config2.default.audio.currentTime % 60) < 10 ? "0" : "") + Math.floor(_config2.default.audio.currentTime % 60);
              var currentMinutes = Math.floor(_config2.default.audio.currentTime / 60);
              var currentHours = "00";
              if (currentMinutes < 10) {
                currentMinutes = "0" + currentMinutes;
              }
              if (currentMinutes >= 60) {
                currentHours = Math.floor(currentMinutes / 60);
                currentMinutes = currentMinutes % 60;
                if (currentMinutes < 10) {
                  currentMinutes = "0" + currentMinutes;
                }
              }
              currentTime.seconds = currentSeconds;
              currentTime.minutes = currentMinutes;
              currentTime.hours = currentHours;
              return currentTime;
            }
            function computeSongDuration() {
              var songDuration = {};
              var songDurationSeconds = (Math.floor(_config2.default.audio.duration % 60) < 10 ? "0" : "") + Math.floor(_config2.default.audio.duration % 60);
              var songDurationMinutes = Math.floor(_config2.default.audio.duration / 60);
              var songDurationHours = "00";
              if (songDurationMinutes < 10) {
                songDurationMinutes = "0" + songDurationMinutes;
              }
              if (songDurationMinutes >= 60) {
                songDurationHours = Math.floor(songDurationMinutes / 60);
                songDurationMinutes = songDurationMinutes % 60;
                if (songDurationMinutes < 10) {
                  songDurationMinutes = "0" + songDurationMinutes;
                }
              }
              songDuration.seconds = isNaN(songDurationSeconds) ? "00" : songDurationSeconds;
              songDuration.minutes = isNaN(songDurationMinutes) ? "00" : songDurationMinutes;
              songDuration.hours = isNaN(songDurationHours) ? "00" : songDurationHours.toString();
              return songDuration;
            }
            function computeSongCompletionPercentage() {
              return _config2.default.audio.currentTime / _config2.default.audio.duration * 100;
            }
            function setCurrentTime(time) {
              if (!_config2.default.active_metadata.live) {
                if (isFinite(time)) {
                  _config2.default.audio.currentTime = time;
                }
              }
            }
            return {
              computeCurrentTimes,
              computeSongDuration,
              computeSongCompletionPercentage,
              setCurrentTime
            };
          }();
          exports2.default = Time;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var BufferedProgressElements = function() {
            function sync() {
              syncGlobal();
              syncPlaylist();
              syncSong();
              syncSongInPlaylist();
            }
            function syncGlobal() {
              var songBufferedProgressBars = document.getElementsByClassName("amplitude-buffered-progress");
              for (var i = 0; i < songBufferedProgressBars.length; i++) {
                var playlist = songBufferedProgressBars[i].getAttribute("data-amplitude-playlist");
                var song = songBufferedProgressBars[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && song == null && !isNaN(_config2.default.buffered)) {
                  songBufferedProgressBars[i].value = parseFloat(parseFloat(_config2.default.buffered) / 100);
                }
              }
            }
            function syncPlaylist() {
              var songBufferedProgressBarsPlaylist = document.querySelectorAll('.amplitude-buffered-progress[data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              for (var i = 0; i < songBufferedProgressBarsPlaylist.length; i++) {
                var song = songBufferedProgressBarsPlaylist[i].getAttribute("data-amplitude-song-index");
                if (song == null && !isNaN(_config2.default.buffered)) {
                  songBufferedProgressBarsPlaylist[i].value = parseFloat(parseFloat(_config2.default.buffered) / 100);
                }
              }
            }
            function syncSong() {
              var songBufferedProgressBarsSongs = document.querySelectorAll('.amplitude-buffered-progress[data-amplitude-song-index="' + _config2.default.active_index + '"]');
              for (var i = 0; i < songBufferedProgressBarsSongs.length; i++) {
                var playlist = songBufferedProgressBarsSongs[i].getAttribute("data-amplitude-playlist");
                if (playlist == null && !isNaN(_config2.default.buffered)) {
                  songBufferedProgressBarsSongs[i].value = parseFloat(parseFloat(_config2.default.buffered) / 100);
                }
              }
            }
            function syncSongInPlaylist() {
              var activePlaylistIndex = _config2.default.active_playlist != null && _config2.default.active_playlist != "" ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
              var songBufferedProgressBarsSongsInPlaylist = document.querySelectorAll('.amplitude-buffered-progress[data-amplitude-song-index="' + activePlaylistIndex + '"][data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              for (var i = 0; i < songBufferedProgressBarsSongsInPlaylist.length; i++) {
                if (!isNaN(_config2.default.buffered)) {
                  songBufferedProgressBarsSongsInPlaylist[i].value = parseFloat(parseFloat(_config2.default.buffered) / 100);
                }
              }
            }
            function reset() {
              var songBufferedProgressBars = document.getElementsByClassName("amplitude-buffered-progress");
              for (var i = 0; i < songBufferedProgressBars.length; i++) {
                songBufferedProgressBars[i].value = 0;
              }
            }
            return {
              sync,
              reset
            };
          }();
          exports2.default = BufferedProgressElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _audioNavigation = __webpack_require__(3);
          var _audioNavigation2 = _interopRequireDefault(_audioNavigation);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _playPauseElements = __webpack_require__(2);
          var _playPauseElements2 = _interopRequireDefault(_playPauseElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Ended = function() {
            function handle() {
              setTimeout(function() {
                if (_config2.default.continue_next) {
                  if (_config2.default.active_playlist == "" || _config2.default.active_playlist == null) {
                    _audioNavigation2.default.setNext(true);
                  } else {
                    _audioNavigation2.default.setNextPlaylist(_config2.default.active_playlist, true);
                  }
                } else {
                  if (!_config2.default.is_touch_moving) {
                    _core2.default.stop();
                    _playPauseElements2.default.sync();
                  }
                }
              }, _config2.default.delay);
            }
            return {
              handle
            };
          }();
          exports2.default = Ended;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _keydown = __webpack_require__(27);
          var _keydown2 = _interopRequireDefault(_keydown);
          var _timeUpdate = __webpack_require__(42);
          var _timeUpdate2 = _interopRequireDefault(_timeUpdate);
          var _ended = __webpack_require__(25);
          var _ended2 = _interopRequireDefault(_ended);
          var _progress = __webpack_require__(35);
          var _progress2 = _interopRequireDefault(_progress);
          var _play = __webpack_require__(31);
          var _play2 = _interopRequireDefault(_play);
          var _pause = __webpack_require__(30);
          var _pause2 = _interopRequireDefault(_pause);
          var _playPause = __webpack_require__(32);
          var _playPause2 = _interopRequireDefault(_playPause);
          var _stop = __webpack_require__(41);
          var _stop2 = _interopRequireDefault(_stop);
          var _mute = __webpack_require__(28);
          var _mute2 = _interopRequireDefault(_mute);
          var _volumeUp = __webpack_require__(45);
          var _volumeUp2 = _interopRequireDefault(_volumeUp);
          var _volumeDown = __webpack_require__(43);
          var _volumeDown2 = _interopRequireDefault(_volumeDown);
          var _songSlider = __webpack_require__(40);
          var _songSlider2 = _interopRequireDefault(_songSlider);
          var _volumeSlider = __webpack_require__(44);
          var _volumeSlider2 = _interopRequireDefault(_volumeSlider);
          var _next = __webpack_require__(29);
          var _next2 = _interopRequireDefault(_next);
          var _prev = __webpack_require__(34);
          var _prev2 = _interopRequireDefault(_prev);
          var _repeat = __webpack_require__(36);
          var _repeat2 = _interopRequireDefault(_repeat);
          var _repeatSong = __webpack_require__(37);
          var _repeatSong2 = _interopRequireDefault(_repeatSong);
          var _playbackSpeed = __webpack_require__(33);
          var _playbackSpeed2 = _interopRequireDefault(_playbackSpeed);
          var _shuffle = __webpack_require__(38);
          var _shuffle2 = _interopRequireDefault(_shuffle);
          var _skipTo = __webpack_require__(39);
          var _skipTo2 = _interopRequireDefault(_skipTo);
          var _waveform = __webpack_require__(22);
          var _waveform2 = _interopRequireDefault(_waveform);
          var _debug = __webpack_require__(4);
          var _debug2 = _interopRequireDefault(_debug);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Events = function() {
            function initialize() {
              _debug2.default.writeMessage("Beginning initialization of event handlers..");
              document.addEventListener("touchmove", function() {
                _config2.default.is_touch_moving = true;
              });
              document.addEventListener("touchend", function() {
                if (_config2.default.is_touch_moving) {
                  _config2.default.is_touch_moving = false;
                }
              });
              bindTimeUpdate();
              bindKeyDownEventHandlers();
              bindSongEnded();
              bindProgress();
              bindPlay();
              bindPause();
              bindPlayPause();
              bindStop();
              bindMute();
              bindVolumeUp();
              bindVolumeDown();
              bindSongSlider();
              bindVolumeSlider();
              bindNext();
              bindPrev();
              bindShuffle();
              bindRepeat();
              bindRepeatSong();
              bindPlaybackSpeed();
              bindSkipTo();
              bindCanPlayThrough();
            }
            function bindTimeUpdate() {
              _config2.default.audio.removeEventListener("timeupdate", _timeUpdate2.default.handle);
              _config2.default.audio.addEventListener("timeupdate", _timeUpdate2.default.handle);
              _config2.default.audio.removeEventListener("durationchange", _timeUpdate2.default.handle);
              _config2.default.audio.addEventListener("durationchange", _timeUpdate2.default.handle);
            }
            function bindKeyDownEventHandlers() {
              document.removeEventListener("keydown", _keydown2.default.handle);
              document.addEventListener("keydown", _keydown2.default.handle);
            }
            function bindSongEnded() {
              _config2.default.audio.removeEventListener("ended", _ended2.default.handle);
              _config2.default.audio.addEventListener("ended", _ended2.default.handle);
            }
            function bindProgress() {
              _config2.default.audio.removeEventListener("progress", _progress2.default.handle);
              _config2.default.audio.addEventListener("progress", _progress2.default.handle);
            }
            function bindPlay() {
              var play_classes = document.getElementsByClassName("amplitude-play");
              for (var i = 0; i < play_classes.length; i++) {
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  play_classes[i].removeEventListener("touchend", _play2.default.handle);
                  play_classes[i].addEventListener("touchend", _play2.default.handle);
                } else {
                  play_classes[i].removeEventListener("click", _play2.default.handle);
                  play_classes[i].addEventListener("click", _play2.default.handle);
                }
              }
            }
            function bindPause() {
              var pause_classes = document.getElementsByClassName("amplitude-pause");
              for (var i = 0; i < pause_classes.length; i++) {
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  pause_classes[i].removeEventListener("touchend", _pause2.default.handle);
                  pause_classes[i].addEventListener("touchend", _pause2.default.handle);
                } else {
                  pause_classes[i].removeEventListener("click", _pause2.default.handle);
                  pause_classes[i].addEventListener("click", _pause2.default.handle);
                }
              }
            }
            function bindPlayPause() {
              var play_pause_classes = document.getElementsByClassName("amplitude-play-pause");
              for (var i = 0; i < play_pause_classes.length; i++) {
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  play_pause_classes[i].removeEventListener("touchend", _playPause2.default.handle);
                  play_pause_classes[i].addEventListener("touchend", _playPause2.default.handle);
                } else {
                  play_pause_classes[i].removeEventListener("click", _playPause2.default.handle);
                  play_pause_classes[i].addEventListener("click", _playPause2.default.handle);
                }
              }
            }
            function bindStop() {
              var stop_classes = document.getElementsByClassName("amplitude-stop");
              for (var i = 0; i < stop_classes.length; i++) {
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  stop_classes[i].removeEventListener("touchend", _stop2.default.handle);
                  stop_classes[i].addEventListener("touchend", _stop2.default.handle);
                } else {
                  stop_classes[i].removeEventListener("click", _stop2.default.handle);
                  stop_classes[i].addEventListener("click", _stop2.default.handle);
                }
              }
            }
            function bindMute() {
              var mute_classes = document.getElementsByClassName("amplitude-mute");
              for (var i = 0; i < mute_classes.length; i++) {
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {
                    _debug2.default.writeMessage("iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4");
                  } else {
                    mute_classes[i].removeEventListener("touchend", _mute2.default.handle);
                    mute_classes[i].addEventListener("touchend", _mute2.default.handle);
                  }
                } else {
                  mute_classes[i].removeEventListener("click", _mute2.default.handle);
                  mute_classes[i].addEventListener("click", _mute2.default.handle);
                }
              }
            }
            function bindVolumeUp() {
              var volume_up_classes = document.getElementsByClassName("amplitude-volume-up");
              for (var i = 0; i < volume_up_classes.length; i++) {
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {
                    _debug2.default.writeMessage("iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4");
                  } else {
                    volume_up_classes[i].removeEventListener("touchend", _volumeUp2.default.handle);
                    volume_up_classes[i].addEventListener("touchend", _volumeUp2.default.handle);
                  }
                } else {
                  volume_up_classes[i].removeEventListener("click", _volumeUp2.default.handle);
                  volume_up_classes[i].addEventListener("click", _volumeUp2.default.handle);
                }
              }
            }
            function bindVolumeDown() {
              var volume_down_classes = document.getElementsByClassName("amplitude-volume-down");
              for (var i = 0; i < volume_down_classes.length; i++) {
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {
                    _debug2.default.writeMessage("iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4");
                  } else {
                    volume_down_classes[i].removeEventListener("touchend", _volumeDown2.default.handle);
                    volume_down_classes[i].addEventListener("touchend", _volumeDown2.default.handle);
                  }
                } else {
                  volume_down_classes[i].removeEventListener("click", _volumeDown2.default.handle);
                  volume_down_classes[i].addEventListener("click", _volumeDown2.default.handle);
                }
              }
            }
            function bindSongSlider() {
              var ua = window.navigator.userAgent;
              var msie = ua.indexOf("MSIE ");
              var song_sliders = document.getElementsByClassName("amplitude-song-slider");
              for (var i = 0; i < song_sliders.length; i++) {
                if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
                  song_sliders[i].removeEventListener("change", _songSlider2.default.handle);
                  song_sliders[i].addEventListener("change", _songSlider2.default.handle);
                } else {
                  song_sliders[i].removeEventListener("input", _songSlider2.default.handle);
                  song_sliders[i].addEventListener("input", _songSlider2.default.handle);
                }
              }
            }
            function bindVolumeSlider() {
              var ua = window.navigator.userAgent;
              var msie = ua.indexOf("MSIE ");
              var volume_sliders = document.getElementsByClassName("amplitude-volume-slider");
              for (var i = 0; i < volume_sliders.length; i++) {
                if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {
                  _debug2.default.writeMessage("iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4");
                } else {
                  if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
                    volume_sliders[i].removeEventListener("change", _volumeSlider2.default.handle);
                    volume_sliders[i].addEventListener("change", _volumeSlider2.default.handle);
                  } else {
                    volume_sliders[i].removeEventListener("input", _volumeSlider2.default.handle);
                    volume_sliders[i].addEventListener("input", _volumeSlider2.default.handle);
                  }
                }
              }
            }
            function bindNext() {
              var next_classes = document.getElementsByClassName("amplitude-next");
              for (var i = 0; i < next_classes.length; i++) {
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  next_classes[i].removeEventListener("touchend", _next2.default.handle);
                  next_classes[i].addEventListener("touchend", _next2.default.handle);
                } else {
                  next_classes[i].removeEventListener("click", _next2.default.handle);
                  next_classes[i].addEventListener("click", _next2.default.handle);
                }
              }
            }
            function bindPrev() {
              var prev_classes = document.getElementsByClassName("amplitude-prev");
              for (var i = 0; i < prev_classes.length; i++) {
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  prev_classes[i].removeEventListener("touchend", _prev2.default.handle);
                  prev_classes[i].addEventListener("touchend", _prev2.default.handle);
                } else {
                  prev_classes[i].removeEventListener("click", _prev2.default.handle);
                  prev_classes[i].addEventListener("click", _prev2.default.handle);
                }
              }
            }
            function bindShuffle() {
              var shuffle_classes = document.getElementsByClassName("amplitude-shuffle");
              for (var i = 0; i < shuffle_classes.length; i++) {
                shuffle_classes[i].classList.remove("amplitude-shuffle-on");
                shuffle_classes[i].classList.add("amplitude-shuffle-off");
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  shuffle_classes[i].removeEventListener("touchend", _shuffle2.default.handle);
                  shuffle_classes[i].addEventListener("touchend", _shuffle2.default.handle);
                } else {
                  shuffle_classes[i].removeEventListener("click", _shuffle2.default.handle);
                  shuffle_classes[i].addEventListener("click", _shuffle2.default.handle);
                }
              }
            }
            function bindRepeat() {
              var repeat_classes = document.getElementsByClassName("amplitude-repeat");
              for (var i = 0; i < repeat_classes.length; i++) {
                repeat_classes[i].classList.remove("amplitude-repeat-on");
                repeat_classes[i].classList.add("amplitude-repeat-off");
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  repeat_classes[i].removeEventListener("touchend", _repeat2.default.handle);
                  repeat_classes[i].addEventListener("touchend", _repeat2.default.handle);
                } else {
                  repeat_classes[i].removeEventListener("click", _repeat2.default.handle);
                  repeat_classes[i].addEventListener("click", _repeat2.default.handle);
                }
              }
            }
            function bindRepeatSong() {
              var repeat_song_classes = document.getElementsByClassName("amplitude-repeat-song");
              for (var i = 0; i < repeat_song_classes.length; i++) {
                repeat_song_classes[i].classList.remove("amplitude-repeat-on");
                repeat_song_classes[i].classList.add("amplitude-repeat-off");
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  repeat_song_classes[i].removeEventListener("touchend", _repeatSong2.default.handle);
                  repeat_song_classes[i].addEventListener("touchend", _repeatSong2.default.handle);
                } else {
                  repeat_song_classes[i].removeEventListener("click", _repeatSong2.default.handle);
                  repeat_song_classes[i].addEventListener("click", _repeatSong2.default.handle);
                }
              }
            }
            function bindPlaybackSpeed() {
              var playback_speed_classes = document.getElementsByClassName("amplitude-playback-speed");
              for (var i = 0; i < playback_speed_classes.length; i++) {
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  playback_speed_classes[i].removeEventListener("touchend", _playbackSpeed2.default.handle);
                  playback_speed_classes[i].addEventListener("touchend", _playbackSpeed2.default.handle);
                } else {
                  playback_speed_classes[i].removeEventListener("click", _playbackSpeed2.default.handle);
                  playback_speed_classes[i].addEventListener("click", _playbackSpeed2.default.handle);
                }
              }
            }
            function bindSkipTo() {
              var skipToClasses = document.getElementsByClassName("amplitude-skip-to");
              for (var i = 0; i < skipToClasses.length; i++) {
                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                  skipToClasses[i].removeEventListener("touchend", _skipTo2.default.handle);
                  skipToClasses[i].addEventListener("touchend", _skipTo2.default.handle);
                } else {
                  skipToClasses[i].removeEventListener("click", _skipTo2.default.handle);
                  skipToClasses[i].addEventListener("click", _skipTo2.default.handle);
                }
              }
            }
            function bindCanPlayThrough() {
              if (_waveform2.default.determineIfUsingWaveforms()) {
                _config2.default.audio.removeEventListener("canplaythrough", _waveform2.default.build);
                _config2.default.audio.addEventListener("canplaythrough", _waveform2.default.build);
              }
            }
            return {
              initialize
            };
          }();
          exports2.default = Events;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _shuffler = __webpack_require__(13);
          var _shuffler2 = _interopRequireDefault(_shuffler);
          var _repeater = __webpack_require__(12);
          var _repeater2 = _interopRequireDefault(_repeater);
          var _audioNavigation = __webpack_require__(3);
          var _audioNavigation2 = _interopRequireDefault(_audioNavigation);
          var _repeatElements = __webpack_require__(8);
          var _repeatElements2 = _interopRequireDefault(_repeatElements);
          var _playPauseElements = __webpack_require__(2);
          var _playPauseElements2 = _interopRequireDefault(_playPauseElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var KeyDown = function() {
            function handle(event) {
              runKeyEvent(event.which);
            }
            function runKeyEvent(key) {
              if (_config2.default.bindings[key] != void 0) {
                switch (_config2.default.bindings[key]) {
                  case "play_pause":
                    runPlayPauseKeyDownEvent();
                    break;
                  case "next":
                    runNextKeyDownEvent();
                    break;
                  case "prev":
                    runPrevKeyDownEvent();
                    break;
                  case "stop":
                    runStopKeyDownEvent();
                    break;
                  case "shuffle":
                    runShuffleKeyDownEvent();
                    break;
                  case "repeat":
                    runRepeatKeyDownEvent();
                    break;
                }
              }
            }
            function runPlayPauseKeyDownEvent() {
              if (_config2.default.audio.paused) {
                _core2.default.play();
              } else {
                _core2.default.pause();
              }
              _playPauseElements2.default.sync();
            }
            function runNextKeyDownEvent() {
              if (_config2.default.active_playlist == "" || _config2.default.active_playlist == null) {
                _audioNavigation2.default.setNext();
              } else {
                _audioNavigation2.default.setNextPlaylist(_config2.default.active_playlist);
              }
            }
            function runPrevKeyDownEvent() {
              if (_config2.default.active_playlist == "" || _config2.default.active_playlist == null) {
                _audioNavigation2.default.setPrevious();
              } else {
                _audioNavigation2.default.setPreviousPlaylist(_config2.default.active_playlist);
              }
            }
            function runStopKeyDownEvent() {
              _playPauseElements2.default.syncToPause();
              _core2.default.stop();
            }
            function runShuffleKeyDownEvent() {
              if (_config2.default.active_playlist == "" || _config2.default.active_playlist == null) {
                _shuffler2.default.toggleShuffle();
              } else {
                _shuffler2.default.toggleShufflePlaylist(_config2.default.active_playlist);
              }
            }
            function runRepeatKeyDownEvent() {
              _repeater2.default.setRepeat(!_config2.default.repeat);
              _repeatElements2.default.syncRepeat();
            }
            return {
              handle
            };
          }();
          exports2.default = KeyDown;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _muteElements = __webpack_require__(10);
          var _muteElements2 = _interopRequireDefault(_muteElements);
          var _volumeSliderElements = __webpack_require__(11);
          var _volumeSliderElements2 = _interopRequireDefault(_volumeSliderElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Mute = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                if (_config2.default.volume == 0) {
                  _core2.default.setVolume(_config2.default.pre_mute_volume);
                } else {
                  _config2.default.pre_mute_volume = _config2.default.volume;
                  _core2.default.setVolume(0);
                }
                _muteElements2.default.setMuted(_config2.default.volume == 0 ? true : false);
                _volumeSliderElements2.default.sync();
              }
            }
            return {
              handle
            };
          }();
          exports2.default = Mute;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _playPauseElements = __webpack_require__(2);
          var _playPauseElements2 = _interopRequireDefault(_playPauseElements);
          var _callbacks = __webpack_require__(9);
          var _callbacks2 = _interopRequireDefault(_callbacks);
          var _audioNavigation = __webpack_require__(3);
          var _audioNavigation2 = _interopRequireDefault(_audioNavigation);
          var _debug = __webpack_require__(4);
          var _debug2 = _interopRequireDefault(_debug);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Next = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                var playlist = this.getAttribute("data-amplitude-playlist");
                if (playlist == null) {
                  handleGlobalNext();
                }
                if (playlist != null) {
                  handlePlaylistNext(playlist);
                }
              }
            }
            function handleGlobalNext() {
              if (_config2.default.active_playlist == "" || _config2.default.active_playlist == null) {
                _audioNavigation2.default.setNext();
              } else {
                _audioNavigation2.default.setNextPlaylist(_config2.default.active_playlist);
              }
            }
            function handlePlaylistNext(playlist) {
              if (playlist == _config2.default.active_playlist) {
                _audioNavigation2.default.setNextPlaylist(playlist);
              } else {
                _debug2.default.writeMessage("You can not go to the next song on a playlist that is not being played!");
              }
            }
            return {
              handle
            };
          }();
          exports2.default = Next;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _configState = __webpack_require__(6);
          var _configState2 = _interopRequireDefault(_configState);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _playPauseElements = __webpack_require__(2);
          var _playPauseElements2 = _interopRequireDefault(_playPauseElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Pause = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                var songIndexAttribute = this.getAttribute("data-amplitude-song-index");
                var playlistAttribute = this.getAttribute("data-amplitude-playlist");
                if (playlistAttribute == null && songIndexAttribute == null) {
                  handleGlobalPause();
                }
                if (playlistAttribute != null && songIndexAttribute == null) {
                  handlePlaylistPause(playlistAttribute);
                }
                if (playlistAttribute == null && songIndexAttribute != null) {
                  handleSongPause(songIndexAttribute);
                }
                if (playlistAttribute != null && songIndexAttribute != null) {
                  handleSongInPlaylistPause(playlistAttribute, songIndexAttribute);
                }
              }
            }
            function handleGlobalPause() {
              _core2.default.pause();
              _playPauseElements2.default.sync();
            }
            function handlePlaylistPause(playlist) {
              if (_config2.default.active_playlist == playlist) {
                _core2.default.pause();
                _playPauseElements2.default.sync();
              }
            }
            function handleSongPause(song) {
              if ((_config2.default.active_playlist == "" || _config2.default.active_playlist == null) && _config2.default.active_index == song) {
                _core2.default.pause();
                _playPauseElements2.default.sync();
              }
            }
            function handleSongInPlaylistPause(playlist, song) {
              if (_config2.default.active_playlist == playlist && _config2.default.playlists[playlist].active_index == song) {
                _core2.default.pause();
                _playPauseElements2.default.sync();
              }
            }
            return {
              handle
            };
          }();
          exports2.default = Pause;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _configState = __webpack_require__(6);
          var _configState2 = _interopRequireDefault(_configState);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _checks = __webpack_require__(5);
          var _checks2 = _interopRequireDefault(_checks);
          var _audioNavigation = __webpack_require__(3);
          var _audioNavigation2 = _interopRequireDefault(_audioNavigation);
          var _playPauseElements = __webpack_require__(2);
          var _playPauseElements2 = _interopRequireDefault(_playPauseElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Play = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                var songIndexAttribute = this.getAttribute("data-amplitude-song-index");
                var playlistAttribute = this.getAttribute("data-amplitude-playlist");
                if (playlistAttribute == null && songIndexAttribute == null) {
                  handleGlobalPlay();
                }
                if (playlistAttribute != null && songIndexAttribute == null) {
                  handlePlaylistPlay(playlistAttribute);
                }
                if (playlistAttribute == null && songIndexAttribute != null) {
                  handleSongPlay(songIndexAttribute);
                }
                if (playlistAttribute != null && songIndexAttribute != null) {
                  handleSongInPlaylistPlay(playlistAttribute, songIndexAttribute);
                }
              }
            }
            function handleGlobalPlay() {
              _core2.default.play();
              _playPauseElements2.default.sync();
            }
            function handlePlaylistPlay(playlist) {
              if (_checks2.default.newPlaylist(playlist)) {
                _audioNavigation2.default.setActivePlaylist(playlist);
                if (_config2.default.playlists[playlist].shuffle) {
                  _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].shuffle_list[0], 0);
                } else {
                  _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[0], 0);
                }
              }
              _core2.default.play();
              _playPauseElements2.default.sync();
            }
            function handleSongPlay(song) {
              if (_checks2.default.newPlaylist(null)) {
                _audioNavigation2.default.setActivePlaylist(null);
                _audioNavigation2.default.changeSong(_config2.default.songs[song], song);
              }
              if (_checks2.default.newSong(null, song)) {
                _audioNavigation2.default.changeSong(_config2.default.songs[song], song);
              }
              _core2.default.play();
              _playPauseElements2.default.sync();
            }
            function handleSongInPlaylistPlay(playlist, song) {
              if (_checks2.default.newPlaylist(playlist)) {
                _audioNavigation2.default.setActivePlaylist(playlist);
                _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[song], song);
              }
              if (_checks2.default.newSong(playlist, song)) {
                _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[song], song);
              }
              _core2.default.play();
              _playPauseElements2.default.sync();
            }
            return {
              handle
            };
          }();
          exports2.default = Play;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _configState = __webpack_require__(6);
          var _configState2 = _interopRequireDefault(_configState);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _checks = __webpack_require__(5);
          var _checks2 = _interopRequireDefault(_checks);
          var _audioNavigation = __webpack_require__(3);
          var _audioNavigation2 = _interopRequireDefault(_audioNavigation);
          var _playPauseElements = __webpack_require__(2);
          var _playPauseElements2 = _interopRequireDefault(_playPauseElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var PlayPause = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                var playlist = this.getAttribute("data-amplitude-playlist");
                var song = this.getAttribute("data-amplitude-song-index");
                if (playlist == null && song == null) {
                  handleGlobalPlayPause();
                }
                if (playlist != null && song == null) {
                  handlePlaylistPlayPause(playlist);
                }
                if (playlist == null && song != null) {
                  handleSongPlayPause(song);
                }
                if (playlist != null && song != null) {
                  handleSongInPlaylistPlayPause(playlist, song);
                }
              }
            }
            function handleGlobalPlayPause() {
              if (_config2.default.audio.paused) {
                _core2.default.play();
              } else {
                _core2.default.pause();
              }
              _playPauseElements2.default.sync();
            }
            function handlePlaylistPlayPause(playlist) {
              if (_checks2.default.newPlaylist(playlist)) {
                _audioNavigation2.default.setActivePlaylist(playlist);
                if (_config2.default.playlists[playlist].shuffle) {
                  _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].shuffle_list[0], 0, true);
                } else {
                  _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[0], 0);
                }
              }
              if (_config2.default.audio.paused) {
                _core2.default.play();
              } else {
                _core2.default.pause();
              }
              _playPauseElements2.default.sync();
            }
            function handleSongPlayPause(song) {
              if (_checks2.default.newPlaylist(null)) {
                _audioNavigation2.default.setActivePlaylist(null);
                _audioNavigation2.default.changeSong(_config2.default.songs[song], song, true);
              }
              if (_checks2.default.newSong(null, song)) {
                _audioNavigation2.default.changeSong(_config2.default.songs[song], song, true);
              }
              if (_config2.default.audio.paused) {
                _core2.default.play();
              } else {
                _core2.default.pause();
              }
              _playPauseElements2.default.sync();
            }
            function handleSongInPlaylistPlayPause(playlist, song) {
              if (_checks2.default.newPlaylist(playlist)) {
                _audioNavigation2.default.setActivePlaylist(playlist);
                _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[song], song, true);
              }
              if (_checks2.default.newSong(playlist, song)) {
                _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[song], song, true);
              }
              if (_config2.default.audio.paused) {
                _core2.default.play();
              } else {
                _core2.default.pause();
              }
              _playPauseElements2.default.sync();
            }
            return {
              handle
            };
          }();
          exports2.default = PlayPause;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _playbackSpeedElements = __webpack_require__(18);
          var _playbackSpeedElements2 = _interopRequireDefault(_playbackSpeedElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var PlaybackSpeed = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                switch (_config2.default.playback_speed) {
                  case 1:
                    _core2.default.setPlaybackSpeed(1.5);
                    break;
                  case 1.5:
                    _core2.default.setPlaybackSpeed(2);
                    break;
                  case 2:
                    _core2.default.setPlaybackSpeed(1);
                    break;
                }
                _playbackSpeedElements2.default.sync();
              }
            }
            return {
              handle
            };
          }();
          exports2.default = PlaybackSpeed;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _audioNavigation = __webpack_require__(3);
          var _audioNavigation2 = _interopRequireDefault(_audioNavigation);
          var _debug = __webpack_require__(4);
          var _debug2 = _interopRequireDefault(_debug);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Prev = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                var playlist = this.getAttribute("data-amplitude-playlist");
                if (playlist == null) {
                  handleGlobalPrev();
                }
                if (playlist != null) {
                  handlePlaylistPrev(playlist);
                }
              }
            }
            function handleGlobalPrev() {
              if (_config2.default.active_playlist == "" || _config2.default.active_playlist == null) {
                _audioNavigation2.default.setPrevious();
              } else {
                _audioNavigation2.default.setPreviousPlaylist(_config2.default.active_playlist);
              }
            }
            function handlePlaylistPrev(playlist) {
              if (playlist == _config2.default.active_playlist) {
                _audioNavigation2.default.setPreviousPlaylist(_config2.default.active_playlist);
              } else {
                _debug2.default.writeMessage("You can not go to the previous song on a playlist that is not being played!");
              }
            }
            return {
              handle
            };
          }();
          exports2.default = Prev;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _bufferedProgressElements = __webpack_require__(24);
          var _bufferedProgressElements2 = _interopRequireDefault(_bufferedProgressElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Progress = function() {
            function handle() {
              if (_config2.default.audio.buffered.length - 1 >= 0) {
                var bufferedEnd = _config2.default.audio.buffered.end(_config2.default.audio.buffered.length - 1);
                var duration = _config2.default.audio.duration;
                _config2.default.buffered = bufferedEnd / duration * 100;
              }
              _bufferedProgressElements2.default.sync();
            }
            return {
              handle
            };
          }();
          exports2.default = Progress;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _repeater = __webpack_require__(12);
          var _repeater2 = _interopRequireDefault(_repeater);
          var _repeatElements = __webpack_require__(8);
          var _repeatElements2 = _interopRequireDefault(_repeatElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Repeat = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                var playlist = this.getAttribute("data-amplitude-playlist");
                if (playlist == null) {
                  handleGlobalRepeat();
                }
                if (playlist != null) {
                  handlePlaylistRepeat(playlist);
                }
              }
            }
            function handleGlobalRepeat() {
              _repeater2.default.setRepeat(!_config2.default.repeat);
              _repeatElements2.default.syncRepeat();
            }
            function handlePlaylistRepeat(playlist) {
              _repeater2.default.setRepeatPlaylist(!_config2.default.playlists[playlist].repeat, playlist);
              _repeatElements2.default.syncRepeatPlaylist(playlist);
            }
            return {
              handle
            };
          }();
          exports2.default = Repeat;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _repeater = __webpack_require__(12);
          var _repeater2 = _interopRequireDefault(_repeater);
          var _repeatElements = __webpack_require__(8);
          var _repeatElements2 = _interopRequireDefault(_repeatElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var RepeatSong = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                _repeater2.default.setRepeatSong(!_config2.default.repeat_song);
                _repeatElements2.default.syncRepeatSong();
              }
            }
            return {
              handle
            };
          }();
          exports2.default = RepeatSong;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _shuffler = __webpack_require__(13);
          var _shuffler2 = _interopRequireDefault(_shuffler);
          var _shuffleElements = __webpack_require__(19);
          var _shuffleElements2 = _interopRequireDefault(_shuffleElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Shuffle = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                var playlist = this.getAttribute("data-amplitude-playlist");
                if (playlist == null) {
                  handleGlobalShuffle();
                } else {
                  handlePlaylistShuffle(playlist);
                }
              }
            }
            function handleGlobalShuffle() {
              _shuffler2.default.toggleShuffle();
              _shuffleElements2.default.syncMain(_config2.default.shuffle_on);
            }
            function handlePlaylistShuffle(playlist) {
              _shuffler2.default.toggleShufflePlaylist(playlist);
              _shuffleElements2.default.syncPlaylist(playlist);
            }
            return {
              handle
            };
          }();
          exports2.default = Shuffle;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _debug = __webpack_require__(4);
          var _debug2 = _interopRequireDefault(_debug);
          var _audioNavigation = __webpack_require__(3);
          var _audioNavigation2 = _interopRequireDefault(_audioNavigation);
          var _checks = __webpack_require__(5);
          var _checks2 = _interopRequireDefault(_checks);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _playPauseElements = __webpack_require__(2);
          var _playPauseElements2 = _interopRequireDefault(_playPauseElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var SkipTo = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                var playlist = this.getAttribute("data-amplitude-playlist");
                var songIndex = this.getAttribute("data-amplitude-song-index");
                var location = this.getAttribute("data-amplitude-location");
                if (location == null) {
                  _debug2.default.writeMessage("You must add an 'data-amplitude-location' attribute in seconds to your 'amplitude-skip-to' element.");
                }
                if (songIndex == null) {
                  _debug2.default.writeMessage("You must add an 'data-amplitude-song-index' attribute to your 'amplitude-skip-to' element.");
                }
                if (location != null && songIndex != null) {
                  if (playlist == null) {
                    handleSkipToSong(parseInt(songIndex), parseInt(location));
                  } else {
                    handleSkipToPlaylist(playlist, parseInt(songIndex), parseInt(location));
                  }
                }
              }
            }
            function handleSkipToSong(songIndex, location) {
              _audioNavigation2.default.changeSong(_config2.default.songs[songIndex], songIndex);
              _core2.default.play();
              _playPauseElements2.default.syncGlobal();
              _playPauseElements2.default.syncSong();
              _core2.default.skipToLocation(location);
            }
            function handleSkipToPlaylist(playlist, songIndex, location) {
              if (_checks2.default.newPlaylist(playlist)) {
                _audioNavigation2.default.setActivePlaylist(playlist);
              }
              _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[songIndex], songIndex);
              _core2.default.play();
              _playPauseElements2.default.syncGlobal();
              _playPauseElements2.default.syncPlaylist();
              _playPauseElements2.default.syncSong();
              _core2.default.skipToLocation(location);
            }
            return {
              handle
            };
          }();
          exports2.default = SkipTo;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _time = __webpack_require__(23);
          var _time2 = _interopRequireDefault(_time);
          var _songSliderElements = __webpack_require__(14);
          var _songSliderElements2 = _interopRequireDefault(_songSliderElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var SongSlider = function() {
            function handle() {
              var locationPercentage = this.value;
              var computedTime = _config2.default.audio.duration * (locationPercentage / 100);
              var playlist = this.getAttribute("data-amplitude-playlist");
              var song = this.getAttribute("data-amplitude-song-index");
              if (playlist == null && song == null) {
                handleGlobalSongSlider(computedTime, locationPercentage);
              }
              if (playlist != null && song == null) {
                handlePlaylistSongSlider(computedTime, locationPercentage, playlist);
              }
              if (playlist == null && song != null) {
                handleSongSongSlider(computedTime, locationPercentage, song);
              }
              if (playlist != null && song != null) {
                handleSongInPlaylistSongSlider(computedTime, locationPercentage, playlist, song);
              }
            }
            function handleGlobalSongSlider(computedTime, locationPercentage) {
              if (!_config2.default.active_metadata.live) {
                _time2.default.setCurrentTime(computedTime);
                _songSliderElements2.default.sync(locationPercentage, _config2.default.active_playlist, _config2.default.active_index);
              }
            }
            function handlePlaylistSongSlider(computedTime, locationPercentage, playlist) {
              if (_config2.default.active_playlist == playlist) {
                if (!_config2.default.active_metadata.live) {
                  _time2.default.setCurrentTime(computedTime);
                  _songSliderElements2.default.sync(locationPercentage, playlist, _config2.default.active_index);
                }
              }
            }
            function handleSongSongSlider(computedTime, locationPercentage, songIndex) {
              if (_config2.default.active_index == songIndex && _config2.default.active_playlist == null) {
                if (!_config2.default.active_metadata.live) {
                  _time2.default.setCurrentTime(computedTime);
                  _songSliderElements2.default.sync(locationPercentage, _config2.default.active_playlist, songIndex);
                }
              }
            }
            function handleSongInPlaylistSongSlider(computedTime, locationPercentage, playlist, songIndex) {
              if (_config2.default.playlists[playlist].active_index == songIndex && _config2.default.active_playlist == playlist) {
                if (!_config2.default.active_metadata.live) {
                  _time2.default.setCurrentTime(computedTime);
                  _songSliderElements2.default.sync(locationPercentage, playlist, songIndex);
                }
              }
            }
            return {
              handle
            };
          }();
          exports2.default = SongSlider;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _configState = __webpack_require__(6);
          var _configState2 = _interopRequireDefault(_configState);
          var _playPauseElements = __webpack_require__(2);
          var _playPauseElements2 = _interopRequireDefault(_playPauseElements);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Stop = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                _playPauseElements2.default.syncToPause();
                _core2.default.stop();
              }
            }
            return {
              handle
            };
          }();
          exports2.default = Stop;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _bufferedProgressElements = __webpack_require__(24);
          var _bufferedProgressElements2 = _interopRequireDefault(_bufferedProgressElements);
          var _timeElements = __webpack_require__(15);
          var _timeElements2 = _interopRequireDefault(_timeElements);
          var _songSliderElements = __webpack_require__(14);
          var _songSliderElements2 = _interopRequireDefault(_songSliderElements);
          var _songPlayedProgressElements = __webpack_require__(20);
          var _songPlayedProgressElements2 = _interopRequireDefault(_songPlayedProgressElements);
          var _time = __webpack_require__(23);
          var _time2 = _interopRequireDefault(_time);
          var _callbacks = __webpack_require__(9);
          var _callbacks2 = _interopRequireDefault(_callbacks);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var TimeUpdate = function() {
            function handle() {
              computeBufferedTime();
              _bufferedProgressElements2.default.sync();
              updateTimeInformation();
              runTimeCallbacks();
            }
            function computeBufferedTime() {
              if (_config2.default.audio.buffered.length - 1 >= 0) {
                var bufferedEnd = _config2.default.audio.buffered.end(_config2.default.audio.buffered.length - 1);
                var duration = _config2.default.audio.duration;
                _config2.default.buffered = bufferedEnd / duration * 100;
              }
            }
            function updateTimeInformation() {
              if (!_config2.default.active_metadata.live) {
                var currentTime = _time2.default.computeCurrentTimes();
                var songCompletionPercentage = _time2.default.computeSongCompletionPercentage();
                var songDuration = _time2.default.computeSongDuration();
                _timeElements2.default.syncCurrentTimes(currentTime);
                _songSliderElements2.default.sync(songCompletionPercentage, _config2.default.active_playlist, _config2.default.active_index);
                _songPlayedProgressElements2.default.sync(songCompletionPercentage);
                _timeElements2.default.syncDurationTimes(currentTime, songDuration);
              }
            }
            function runTimeCallbacks() {
              var currentSeconds = Math.floor(_config2.default.audio.currentTime);
              if (_config2.default.active_metadata.time_callbacks != void 0 && _config2.default.active_metadata.time_callbacks[currentSeconds] != void 0) {
                if (!_config2.default.active_metadata.time_callbacks[currentSeconds].run) {
                  _config2.default.active_metadata.time_callbacks[currentSeconds].run = true;
                  _config2.default.active_metadata.time_callbacks[currentSeconds]();
                }
              } else {
                for (var seconds in _config2.default.active_metadata.time_callbacks) {
                  if (_config2.default.active_metadata.time_callbacks.hasOwnProperty(seconds)) {
                    _config2.default.active_metadata.time_callbacks[seconds].run = false;
                  }
                }
              }
            }
            return {
              handle
            };
          }();
          exports2.default = TimeUpdate;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _muteElements = __webpack_require__(10);
          var _muteElements2 = _interopRequireDefault(_muteElements);
          var _volumeSliderElements = __webpack_require__(11);
          var _volumeSliderElements2 = _interopRequireDefault(_volumeSliderElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var VolumeDown = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                var volume = null;
                if (_config2.default.volume - _config2.default.volume_increment > 0) {
                  volume = _config2.default.volume - _config2.default.volume_increment;
                } else {
                  volume = 0;
                }
                _core2.default.setVolume(volume);
                _muteElements2.default.setMuted(_config2.default.volume == 0 ? true : false);
                _volumeSliderElements2.default.sync();
              }
            }
            return {
              handle
            };
          }();
          exports2.default = VolumeDown;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _muteElements = __webpack_require__(10);
          var _muteElements2 = _interopRequireDefault(_muteElements);
          var _volumeSliderElements = __webpack_require__(11);
          var _volumeSliderElements2 = _interopRequireDefault(_volumeSliderElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var VolumeSlider = function() {
            function handle() {
              _core2.default.setVolume(this.value);
              _muteElements2.default.setMuted(_config2.default.volume == 0 ? true : false);
              _volumeSliderElements2.default.sync();
            }
            return {
              handle
            };
          }();
          exports2.default = VolumeSlider;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _muteElements = __webpack_require__(10);
          var _muteElements2 = _interopRequireDefault(_muteElements);
          var _volumeSliderElements = __webpack_require__(11);
          var _volumeSliderElements2 = _interopRequireDefault(_volumeSliderElements);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var VolumeUp = function() {
            function handle() {
              if (!_config2.default.is_touch_moving) {
                var volume = null;
                if (_config2.default.volume + _config2.default.volume_increment <= 100) {
                  volume = _config2.default.volume + _config2.default.volume_increment;
                } else {
                  volume = 100;
                }
                _core2.default.setVolume(volume);
                _muteElements2.default.setMuted(_config2.default.volume == 0 ? true : false);
                _volumeSliderElements2.default.sync();
              }
            }
            return {
              handle
            };
          }();
          exports2.default = VolumeUp;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Fx = function() {
            function configureWebAudioAPI() {
              var browserContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.oAudioContext || window.msAudioContext;
              if (browserContext) {
                _config2.default.context = new browserContext();
                _config2.default.analyser = _config2.default.context.createAnalyser();
                _config2.default.audio.crossOrigin = "anonymous";
                _config2.default.source = _config2.default.context.createMediaElementSource(_config2.default.audio);
                _config2.default.source.connect(_config2.default.analyser);
                _config2.default.analyser.connect(_config2.default.context.destination);
              } else {
                AmplitudeHelpers.writeDebugMessage("Web Audio API is unavailable! We will set any of your visualizations with your back up definition!");
              }
            }
            function webAudioAPIAvailable() {
              var browserContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.oAudioContext || window.msAudioContext;
              _config2.default.web_audio_api_available = false;
              if (browserContext) {
                _config2.default.web_audio_api_available = true;
                return true;
              } else {
                _config2.default.web_audio_api_available = false;
                return false;
              }
            }
            function determineUsingAnyFX() {
              var waveforms = document.querySelectorAll(".amplitude-wave-form");
              var visualizationElements = document.querySelectorAll(".amplitude-visualization");
              if (waveforms.length > 0 || visualizationElements.length > 0) {
                return true;
              } else {
                return false;
              }
            }
            return {
              configureWebAudioAPI,
              webAudioAPIAvailable,
              determineUsingAnyFX
            };
          }();
          exports2.default = Fx;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _init = __webpack_require__(21);
          var _init2 = _interopRequireDefault(_init);
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _core = __webpack_require__(1);
          var _core2 = _interopRequireDefault(_core);
          var _shuffler = __webpack_require__(13);
          var _shuffler2 = _interopRequireDefault(_shuffler);
          var _configState = __webpack_require__(6);
          var _configState2 = _interopRequireDefault(_configState);
          var _audioNavigation = __webpack_require__(3);
          var _audioNavigation2 = _interopRequireDefault(_audioNavigation);
          var _repeater = __webpack_require__(12);
          var _repeater2 = _interopRequireDefault(_repeater);
          var _checks = __webpack_require__(5);
          var _checks2 = _interopRequireDefault(_checks);
          var _visualizations = __webpack_require__(16);
          var _visualizations2 = _interopRequireDefault(_visualizations);
          var _shuffleElements = __webpack_require__(19);
          var _shuffleElements2 = _interopRequireDefault(_shuffleElements);
          var _repeatElements = __webpack_require__(8);
          var _repeatElements2 = _interopRequireDefault(_repeatElements);
          var _songSliderElements = __webpack_require__(14);
          var _songSliderElements2 = _interopRequireDefault(_songSliderElements);
          var _songPlayedProgressElements = __webpack_require__(20);
          var _songPlayedProgressElements2 = _interopRequireDefault(_songPlayedProgressElements);
          var _timeElements = __webpack_require__(15);
          var _timeElements2 = _interopRequireDefault(_timeElements);
          var _playPauseElements = __webpack_require__(2);
          var _playPauseElements2 = _interopRequireDefault(_playPauseElements);
          var _metaDataElements = __webpack_require__(7);
          var _metaDataElements2 = _interopRequireDefault(_metaDataElements);
          var _playbackSpeedElements = __webpack_require__(18);
          var _playbackSpeedElements2 = _interopRequireDefault(_playbackSpeedElements);
          var _debug = __webpack_require__(4);
          var _debug2 = _interopRequireDefault(_debug);
          var _soundcloud = __webpack_require__(17);
          var _soundcloud2 = _interopRequireDefault(_soundcloud);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var Amplitude = function() {
            function init(userConfig) {
              _init2.default.initialize(userConfig);
            }
            function getConfig() {
              return _config2.default;
            }
            function bindNewElements() {
              _init2.default.rebindDisplay();
            }
            function getActivePlaylist() {
              return _config2.default.active_playlist;
            }
            function getPlaybackSpeed() {
              return _config2.default.playback_speed;
            }
            function setPlaybackSpeed(speed) {
              _core2.default.setPlaybackSpeed(speed);
              _playbackSpeedElements2.default.sync();
            }
            function getRepeat() {
              return _config2.default.repeat;
            }
            function getRepeatPlaylist(playlistKey) {
              return _config2.default.playlists[playlistKey].repeat;
            }
            function getShuffle() {
              return _config2.default.shuffle_on;
            }
            function getShufflePlaylist(playlist) {
              return _config2.default.playlists[playlist].shuffle;
            }
            function setShuffle(shuffle) {
              _shuffler2.default.setShuffle(shuffle);
              _shuffleElements2.default.syncMain();
            }
            function setShufflePlaylist(playlist, shuffle) {
              _shuffler2.default.setShufflePlaylist(playlist, shuffle);
              _shuffleElements2.default.syncMain();
              _shuffleElements2.default.syncPlaylist(playlist);
            }
            function setRepeat(repeatState) {
              _repeater2.default.setRepeat(repeatState);
              _repeatElements2.default.syncRepeat();
            }
            function setRepeatPlaylist(playlist, repeatState) {
              _repeater2.default.setRepeatPlaylist(repeatState, playlist);
              _repeatElements2.default.syncRepeatPlaylist(playlist);
            }
            function setRepeatSong(repeatState) {
              if (!_config2.default.is_touch_moving) {
                _repeater2.default.setRepeatSong(!_config2.default.repeat_song);
                _repeatElements2.default.syncRepeatSong();
              }
            }
            function getDefaultAlbumArt() {
              return _config2.default.default_album_art;
            }
            function getDefaultPlaylistArt() {
              return _config2.default.default_playlist_art;
            }
            function setDefaultAlbumArt(url) {
              _config2.default.default_album_art = url;
            }
            function setDefaultPlaylistArt(url) {
              _config2.default.default_plalist_art = url;
            }
            function getSongPlayedPercentage() {
              return _config2.default.audio.currentTime / _config2.default.audio.duration * 100;
            }
            function getSongPlayedSeconds() {
              return _config2.default.audio.currentTime;
            }
            function getSongDuration() {
              return _config2.default.audio.duration;
            }
            function setSongPlayedPercentage(percentage) {
              if (typeof percentage == "number" && percentage > 0 && percentage < 100) {
                _config2.default.audio.currentTime = _config2.default.audio.duration * (percentage / 100);
              }
            }
            function setDebug(state) {
              _config2.default.debug = state;
            }
            function getActiveSongMetadata() {
              return _config2.default.active_metadata;
            }
            function getActivePlaylistMetadata() {
              return _config2.default.playlists[_config2.default.active_playlist];
            }
            function getSongAtIndex(index) {
              return _config2.default.songs[index];
            }
            function getSongAtPlaylistIndex(playlist, index) {
              var song = _config2.default.playlists[playlist].songs[index];
              return song;
            }
            function addSong(song) {
              if (_config2.default.songs == void 0) {
                _config2.default.songs = [];
              }
              _config2.default.songs.push(song);
              if (_config2.default.shuffle_on) {
                _config2.default.shuffle_list.push(song);
              }
              if (_soundcloud2.default.isSoundCloudURL(song.url)) {
                _soundcloud2.default.resolveIndividualStreamableURL(song.url, null, _config2.default.songs.length - 1, _config2.default.shuffle_on);
              }
              return _config2.default.songs.length - 1;
            }
            function prependSong(song) {
              if (_config2.default.songs == void 0) {
                _config2.default.songs = [];
              }
              _config2.default.songs.unshift(song);
              if (_config2.default.shuffle_on) {
                _config2.default.shuffle_list.unshift(song);
              }
              if (_soundcloud2.default.isSoundCloudURL(song.url)) {
                _soundcloud2.default.resolveIndividualStreamableURL(song.url, null, _config2.default.songs.length - 1, _config2.default.shuffle_on);
              }
              return 0;
            }
            function addSongToPlaylist(song, playlist) {
              if (_config2.default.playlists[playlist] != void 0) {
                _config2.default.playlists[playlist].songs.push(song);
                if (_config2.default.playlists[playlist].shuffle) {
                  _config2.default.playlists[playlist].shuffle_list.push(song);
                }
                if (_soundcloud2.default.isSoundCloudURL(song.url)) {
                  _soundcloud2.default.resolveIndividualStreamableURL(song.url, playlist, _config2.default.playlists[playlist].songs.length - 1, _config2.default.playlists[playlist].shuffle);
                }
                return _config2.default.playlists[playlist].songs.length - 1;
              } else {
                _debug2.default.writeMessage("Playlist doesn't exist!");
                return null;
              }
            }
            function addPlaylist(key, data, songs) {
              if (_config2.default.playlists[key] == void 0) {
                _config2.default.playlists[key] = {};
                var ignoredKeys = ["repeat", "shuffle", "shuffle_list", "songs", "src"];
                for (var dataKey in data) {
                  if (ignoredKeys.indexOf(dataKey) < 0) {
                    _config2.default.playlists[key][dataKey] = data[dataKey];
                  }
                }
                _config2.default.playlists[key].songs = songs;
                _config2.default.playlists[key].active_index = null;
                _config2.default.playlists[key].repeat = false;
                _config2.default.playlists[key].shuffle = false;
                _config2.default.playlists[key].shuffle_list = [];
                return _config2.default.playlists[key];
              } else {
                _debug2.default.writeMessage("A playlist already exists with that key!");
                return null;
              }
            }
            function removeSong(index) {
              _config2.default.songs.splice(index, 1);
            }
            function removeSongFromPlaylist(index, playlist) {
              if (_config2.default.playlists[playlist] != void 0) {
                _config2.default.playlists[playlist].songs.splice(index, 1);
              }
            }
            function playNow(song) {
              if (song.url) {
                _config2.default.audio.src = song.url;
                _config2.default.active_metadata = song;
                _config2.default.active_album = song.album;
              } else {
                _debug2.default.writeMessage("The song needs to have a URL!");
              }
              _core2.default.play();
              _playPauseElements2.default.sync();
              _metaDataElements2.default.displayMetaData();
              _songSliderElements2.default.resetElements();
              _songPlayedProgressElements2.default.resetElements();
              _timeElements2.default.resetCurrentTimes();
              _timeElements2.default.resetDurationTimes();
            }
            function playSongAtIndex(index) {
              _core2.default.stop();
              if (_checks2.default.newPlaylist(null)) {
                _audioNavigation2.default.setActivePlaylist(null);
                _audioNavigation2.default.changeSong(_config2.default.songs[index], index);
              }
              if (_checks2.default.newSong(null, index)) {
                _audioNavigation2.default.changeSong(_config2.default.songs[index], index);
              }
              _core2.default.play();
              _playPauseElements2.default.sync();
            }
            function playPlaylistSongAtIndex(index, playlist) {
              _core2.default.stop();
              if (_checks2.default.newPlaylist(playlist)) {
                _audioNavigation2.default.setActivePlaylist(playlist);
                _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[index], index);
              }
              if (_checks2.default.newSong(playlist, index)) {
                _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[index], index);
              }
              _playPauseElements2.default.sync();
              _core2.default.play();
            }
            function play() {
              _core2.default.play();
            }
            function pause() {
              _core2.default.pause();
            }
            function stop() {
              _core2.default.stop();
            }
            function getAudio() {
              return _config2.default.audio;
            }
            function getAnalyser() {
              return _config2.default.analyser;
            }
            function next() {
              var playlist = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
              var nextData = {};
              if (playlist == "" || playlist == null) {
                if (_config2.default.active_playlist == null || _config2.default.active_playlist == "") {
                  _audioNavigation2.default.setNext();
                } else {
                  _audioNavigation2.default.setNextPlaylist(_config2.default.active_playlist);
                }
              } else {
                _audioNavigation2.default.setNextPlaylist(playlist);
              }
            }
            function prev() {
              var playlist = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
              var prevData = {};
              if (playlist == "" || playlist == null) {
                if (_config2.default.active_playlist == null || _config2.default.active_playlist == "") {
                  _audioNavigation2.default.setPrevious();
                } else {
                  _audioNavigation2.default.setPreviousPlaylist(_config2.default.active_playlist);
                }
              } else {
                _audioNavigation2.default.setPreviousPlaylist(playlist);
              }
            }
            function getSongs() {
              return _config2.default.songs;
            }
            function getSongsInPlaylist(playlist) {
              return _config2.default.playlists[playlist].songs;
            }
            function getSongsState() {
              if (_config2.default.shuffle_on) {
                return _config2.default.shuffle_list;
              } else {
                return _config2.default.songs;
              }
            }
            function getSongsStatePlaylist(playlist) {
              if (_config2.default.playlists[playlist].shuffle) {
                return _config2.default.playlists[playlist].shuffle_list;
              } else {
                return _config2.default.playlists[playlist].songs;
              }
            }
            function getActiveIndex() {
              return parseInt(_config2.default.active_index);
            }
            function getVersion() {
              return _config2.default.version;
            }
            function getBuffered() {
              return _config2.default.buffered;
            }
            function skipTo(seconds, songIndex) {
              var playlist = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
              seconds = parseInt(seconds);
              if (playlist != null) {
                if (_checks2.default.newPlaylist(playlist)) {
                  _audioNavigation2.default.setActivePlaylist(playlist);
                }
                _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[songIndex], songIndex);
                _core2.default.play();
                _playPauseElements2.default.syncGlobal();
                _playPauseElements2.default.syncPlaylist();
                _playPauseElements2.default.syncSong();
                _core2.default.skipToLocation(seconds);
              } else {
                _audioNavigation2.default.changeSong(_config2.default.songs[songIndex], songIndex);
                _core2.default.play();
                _playPauseElements2.default.syncGlobal();
                _playPauseElements2.default.syncSong();
                _core2.default.skipToLocation(seconds);
              }
            }
            function setSongMetaData(index, metaData) {
              var playlist = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
              if (playlist != "" && playlist != null && _config2.default.playlists[playlist] != void 0) {
                for (var key in metaData) {
                  if (metaData.hasOwnProperty(key)) {
                    if (key != "url" && key != "URL" && key != "live" && key != "LIVE") {
                      _config2.default.playlists[playlist].songs[index][key] = metaData[key];
                    }
                  }
                }
              } else {
                for (var key in metaData) {
                  if (metaData.hasOwnProperty(key)) {
                    if (key != "url" && key != "URL" && key != "live" && key != "LIVE") {
                      _config2.default.songs[index][key] = metaData[key];
                    }
                  }
                }
              }
              _metaDataElements2.default.displayMetaData();
              _metaDataElements2.default.syncMetaData();
            }
            function setPlaylistMetaData(playlist, metaData) {
              if (_config2.default.playlists[playlist] != void 0) {
                var ignoredKeys = ["repeat", "shuffle", "shuffle_list", "songs", "src"];
                for (var key in metaData) {
                  if (metaData.hasOwnProperty(key)) {
                    if (ignoredKeys.indexOf(key) < 0) {
                      _config2.default.playlists[playlist][key] = metaData[key];
                    }
                  }
                }
                _metaDataElements2.default.displayPlaylistMetaData();
              } else {
                _debug2.default.writeMessage("You must provide a valid playlist key!");
              }
            }
            function setDelay(time) {
              _config2.default.delay = time;
            }
            function getDelay() {
              return _config2.default.delay;
            }
            function getPlayerState() {
              return _config2.default.player_state;
            }
            function registerVisualization(visualization, preferences) {
              _visualizations2.default.register(visualization, preferences);
            }
            function setPlaylistVisualization(playlist, visualizationKey) {
              if (_config2.default.playlists[playlist] != void 0) {
                if (_config2.default.visualizations.available[visualizationKey] != void 0) {
                  _config2.default.playlists[playlist].visualization = visualizationKey;
                } else {
                  _debug2.default.writeMessage("A visualization does not exist for the key provided.");
                }
              } else {
                _debug2.default.writeMessage("The playlist for the key provided does not exist");
              }
            }
            function setSongVisualization(songIndex, visualizationKey) {
              if (_config2.default.songs[songIndex]) {
                if (_config2.default.visualizations.available[visualizationKey] != void 0) {
                  _config2.default.songs[songIndex].visualization = visualizationKey;
                } else {
                  _debug2.default.writeMessage("A visualization does not exist for the key provided.");
                }
              } else {
                _debug2.default.writeMessage("A song at that index is undefined");
              }
            }
            function setSongInPlaylistVisualization(playlist, songIndex, visualizationKey) {
              if (_config2.default.playlists[playlist].songs[songIndex] != void 0) {
                if (_config2.default.visualizations.available[visualizationKey] != void 0) {
                  _config2.default.playlists[playlist].songs[songIndex].visualization = visualizationKey;
                } else {
                  _debug2.default.writeMessage("A visualization does not exist for the key provided.");
                }
              } else {
                _debug2.default.writeMessage("The song in the playlist at that key is not defined");
              }
            }
            function setGlobalVisualization(visualizationKey) {
              if (_config2.default.visualizations.available[visualizationKey] != void 0) {
                _config2.default.visualization = visualizationKey;
              } else {
                _debug2.default.writeMessage("A visualization does not exist for the key provided.");
              }
            }
            function setVolume(volumeLevel) {
              _core2.default.setVolume(volumeLevel);
            }
            function getVolume() {
              return _config2.default.volume;
            }
            return {
              init,
              getConfig,
              bindNewElements,
              getActivePlaylist,
              getPlaybackSpeed,
              setPlaybackSpeed,
              getRepeat,
              getRepeatPlaylist,
              getShuffle,
              getShufflePlaylist,
              setShuffle,
              setShufflePlaylist,
              setRepeat,
              setRepeatSong,
              setRepeatPlaylist,
              getDefaultAlbumArt,
              setDefaultAlbumArt,
              getDefaultPlaylistArt,
              setDefaultPlaylistArt,
              getSongPlayedPercentage,
              setSongPlayedPercentage,
              getSongPlayedSeconds,
              getSongDuration,
              setDebug,
              getActiveSongMetadata,
              getActivePlaylistMetadata,
              getSongAtIndex,
              getSongAtPlaylistIndex,
              addSong,
              prependSong,
              addSongToPlaylist,
              removeSong,
              removeSongFromPlaylist,
              playNow,
              playSongAtIndex,
              playPlaylistSongAtIndex,
              play,
              pause,
              stop,
              getAudio,
              getAnalyser,
              next,
              prev,
              getSongs,
              getSongsInPlaylist,
              getSongsState,
              getSongsStatePlaylist,
              getActiveIndex,
              getVersion,
              getBuffered,
              skipTo,
              setSongMetaData,
              setPlaylistMetaData,
              setDelay,
              getDelay,
              getPlayerState,
              addPlaylist,
              registerVisualization,
              setPlaylistVisualization,
              setSongVisualization,
              setSongInPlaylistVisualization,
              setGlobalVisualization,
              getVolume,
              setVolume
            };
          }();
          exports2.default = Amplitude;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          var _debug = __webpack_require__(4);
          var _debug2 = _interopRequireDefault(_debug);
          var _checks = __webpack_require__(5);
          var _checks2 = _interopRequireDefault(_checks);
          var _metaDataElements = __webpack_require__(7);
          var _metaDataElements2 = _interopRequireDefault(_metaDataElements);
          var _soundcloud = __webpack_require__(17);
          var _soundcloud2 = _interopRequireDefault(_soundcloud);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var PlaylistsInitializer = function() {
            function initialize(playlists) {
              _config2.default.playlists = playlists;
              copySongsToPlaylists();
              grabSoundCloudData();
              initializePlaylistActiveIndexes();
              initializePlaylistShuffleStatuses();
              initializePlaylistsRepeatStatuses();
              initializePlaylistShuffleLists();
              initializeFirstSongInPlaylistMetaData();
            }
            function initializePlaylistActiveIndexes() {
              for (var key in _config2.default.playlists) {
                _config2.default.playlists[key].active_index = null;
              }
            }
            function copySongsToPlaylists() {
              for (var key in _config2.default.playlists) {
                if (_config2.default.playlists.hasOwnProperty(key)) {
                  if (_config2.default.playlists[key].songs) {
                    for (var i = 0; i < _config2.default.playlists[key].songs.length; i++) {
                      if (_checks2.default.isInt(_config2.default.playlists[key].songs[i])) {
                        _config2.default.playlists[key].songs[i] = _config2.default.songs[_config2.default.playlists[key].songs[i]];
                        _config2.default.playlists[key].songs[i].index = i;
                      }
                      if (_checks2.default.isInt(_config2.default.playlists[key].songs[i]) && !_config2.default.songs[_config2.default.playlists[key].songs[i]]) {
                        _debug2.default.writeMessage("The song index: " + _config2.default.playlists[key].songs[i] + " in playlist with key: " + key + " is not defined in your songs array!");
                      }
                      if (!_checks2.default.isInt(_config2.default.playlists[key].songs[i])) {
                        _config2.default.playlists[key].songs[i].index = i;
                      }
                    }
                  }
                }
              }
            }
            function grabSoundCloudData() {
              for (var key in _config2.default.playlists) {
                if (_config2.default.playlists.hasOwnProperty(key)) {
                  for (var i = 0; i < _config2.default.playlists[key].songs.length; i++) {
                    if (_soundcloud2.default.isSoundCloudURL(_config2.default.playlists[key].songs[i].url)) {
                      if (_config2.default.playlists[key].songs[i].soundcloud_data == void 0) {
                        _soundcloud2.default.resolveIndividualStreamableURL(_config2.default.playlists[key].songs[i].url, key, i);
                      }
                    }
                  }
                }
              }
            }
            function initializePlaylistShuffleStatuses() {
              for (var key in _config2.default.playlists) {
                _config2.default.playlists[key].shuffle = false;
              }
            }
            function initializePlaylistsRepeatStatuses() {
              for (var key in _config2.default.playlists) {
                _config2.default.playlists[key].repeat = false;
              }
            }
            function initializePlaylistShuffleLists() {
              for (var key in _config2.default.playlists) {
                _config2.default.playlists[key].shuffle_list = [];
              }
            }
            function initializeFirstSongInPlaylistMetaData() {
              for (var key in _config2.default.playlists) {
                _metaDataElements2.default.setFirstSongInPlaylist(_config2.default.playlists[key].songs[0], key);
              }
            }
            return {
              initialize
            };
          }();
          exports2.default = PlaylistsInitializer;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var ContainerElements = function() {
            function setActive(direct) {
              var songContainers = document.getElementsByClassName("amplitude-song-container");
              for (var i = 0; i < songContainers.length; i++) {
                songContainers[i].classList.remove("amplitude-active-song-container");
              }
              if (_config2.default.active_playlist == "" || _config2.default.active_playlist == null) {
                var activeIndex = "";
                if (direct) {
                  activeIndex = _config2.default.active_index;
                } else {
                  if (_config2.default.shuffle_on) {
                    activeIndex = _config2.default.shuffle_list[_config2.default.active_index].index;
                  } else {
                    activeIndex = _config2.default.active_index;
                  }
                }
                if (document.querySelectorAll('.amplitude-song-container[data-amplitude-song-index="' + activeIndex + '"]')) {
                  var _songContainers = document.querySelectorAll('.amplitude-song-container[data-amplitude-song-index="' + activeIndex + '"]');
                  for (var _i = 0; _i < _songContainers.length; _i++) {
                    if (!_songContainers[_i].hasAttribute("data-amplitude-playlist")) {
                      _songContainers[_i].classList.add("amplitude-active-song-container");
                    }
                  }
                }
              } else {
                if (_config2.default.active_playlist != null && _config2.default.active_playlist != "" || direct) {
                  var activePlaylistIndex = _config2.default.playlists[_config2.default.active_playlist].active_index;
                } else {
                  var activePlaylistIndex = "";
                  if (_config2.default.playlists[_config2.default.active_playlist].shuffle) {
                    activePlaylistIndex = _config2.default.playlists[_config2.default.active_playlist].shuffle_list[_config2.default.playlists[_config2.default.active_playlist].active_index].index;
                  } else {
                    activePlaylistIndex = _config2.default.playlists[_config2.default.active_playlist].active_index;
                  }
                }
                if (document.querySelectorAll('.amplitude-song-container[data-amplitude-song-index="' + activePlaylistIndex + '"][data-amplitude-playlist="' + _config2.default.active_playlist + '"]')) {
                  var _songContainers2 = document.querySelectorAll('.amplitude-song-container[data-amplitude-song-index="' + activePlaylistIndex + '"][data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
                  for (var _i2 = 0; _i2 < _songContainers2.length; _i2++) {
                    _songContainers2[_i2].classList.add("amplitude-active-song-container");
                  }
                }
              }
            }
            return {
              setActive
            };
          }();
          exports2.default = ContainerElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var CurrentHourElements = function() {
            function sync(hours) {
              syncGlobal(hours);
              syncPlaylist(hours);
              syncSong(hours);
              syncSongInPlaylist(hours);
            }
            function syncGlobal(hours) {
              var currentHourSelectors = document.querySelectorAll(".amplitude-current-hours");
              for (var i = 0; i < currentHourSelectors.length; i++) {
                var playlist = currentHourSelectors[i].getAttribute("data-amplitude-playlist");
                var songIndex = currentHourSelectors[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && songIndex == null) {
                  currentHourSelectors[i].innerHTML = hours;
                }
              }
            }
            function syncPlaylist(hours) {
              var currentHourPlaylistSelectors = document.querySelectorAll('.amplitude-current-hours[data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              for (var i = 0; i < currentHourPlaylistSelectors.length; i++) {
                var songIndex = currentHourPlaylistSelectors[i].getAttribute("data-amplitude-song-index");
                if (songIndex == null) {
                  currentHourPlaylistSelectors[i].innerHTML = hours;
                }
              }
            }
            function syncSong(hours) {
              if (_config2.default.active_playlist == null) {
                var currentHourSongSelectors = document.querySelectorAll('.amplitude-current-hours[data-amplitude-song-index="' + _config2.default.active_index + '"]');
                for (var i = 0; i < currentHourSongSelectors.length; i++) {
                  var playlist = currentHourSongSelectors[i].getAttribute("data-amplitude-playlist");
                  if (playlist == null) {
                    currentHourSongSelectors[i].innerHTML = hours;
                  }
                }
              }
            }
            function syncSongInPlaylist(hours) {
              var activePlaylistIndex = _config2.default.active_playlist != "" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
              var currentHourPlaylistSongSelectors = document.querySelectorAll('.amplitude-current-hours[data-amplitude-playlist="' + _config2.default.active_playlist + '"][data-amplitude-song-index="' + activePlaylistIndex + '"]');
              for (var i = 0; i < currentHourPlaylistSongSelectors.length; i++) {
                currentHourPlaylistSongSelectors[i].innerHTML = hours;
              }
            }
            function resetTimes() {
              var hourSelectors = document.querySelectorAll(".amplitude-current-hours");
              for (var i = 0; i < hourSelectors.length; i++) {
                hourSelectors[i].innerHTML = "00";
              }
            }
            return {
              sync,
              resetTimes
            };
          }();
          exports2.default = CurrentHourElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var CurrentMinuteElements = function() {
            function sync(minutes) {
              syncGlobal(minutes);
              syncPlaylist(minutes);
              syncSong(minutes);
              syncSongInPlaylist(minutes);
            }
            function syncGlobal(minutes) {
              var currentMinuteSelectors = document.querySelectorAll(".amplitude-current-minutes");
              for (var i = 0; i < currentMinuteSelectors.length; i++) {
                var playlist = currentMinuteSelectors[i].getAttribute("data-amplitude-playlist");
                var songIndex = currentMinuteSelectors[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && songIndex == null) {
                  currentMinuteSelectors[i].innerHTML = minutes;
                }
              }
            }
            function syncPlaylist(minutes) {
              var currentMinutePlaylistSelectors = document.querySelectorAll('.amplitude-current-minutes[data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              for (var i = 0; i < currentMinutePlaylistSelectors.length; i++) {
                var songIndex = currentMinutePlaylistSelectors[i].getAttribute("data-amplitude-song-index");
                if (songIndex == null) {
                  currentMinutePlaylistSelectors[i].innerHTML = minutes;
                }
              }
            }
            function syncSong(minutes) {
              if (_config2.default.active_playlist == null) {
                var currentMinuteSongSelectors = document.querySelectorAll('.amplitude-current-minutes[data-amplitude-song-index="' + _config2.default.active_index + '"]');
                for (var i = 0; i < currentMinuteSongSelectors.length; i++) {
                  var playlist = currentMinuteSongSelectors[i].getAttribute("data-amplitude-playlist");
                  if (playlist == null) {
                    currentMinuteSongSelectors[i].innerHTML = minutes;
                  }
                }
              }
            }
            function syncSongInPlaylist(minutes) {
              var activePlaylistIndex = _config2.default.active_playlist != "" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
              var currentMinutePlaylistSongSelectors = document.querySelectorAll('.amplitude-current-minutes[data-amplitude-playlist="' + _config2.default.active_playlist + '"][data-amplitude-song-index="' + activePlaylistIndex + '"]');
              for (var i = 0; i < currentMinutePlaylistSongSelectors.length; i++) {
                currentMinutePlaylistSongSelectors[i].innerHTML = minutes;
              }
            }
            function resetTimes() {
              var minuteSelectors = document.querySelectorAll(".amplitude-current-minutes");
              for (var i = 0; i < minuteSelectors.length; i++) {
                minuteSelectors[i].innerHTML = "00";
              }
            }
            return {
              sync,
              resetTimes
            };
          }();
          exports2.default = CurrentMinuteElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var CurrentSecondElements = function() {
            function sync(seconds) {
              syncGlobal(seconds);
              syncPlaylist(seconds);
              syncSong(seconds);
              syncSongInPlaylist(seconds);
            }
            function syncGlobal(seconds) {
              var currentSecondSelectors = document.querySelectorAll(".amplitude-current-seconds");
              for (var i = 0; i < currentSecondSelectors.length; i++) {
                var playlist = currentSecondSelectors[i].getAttribute("data-amplitude-playlist");
                var songIndex = currentSecondSelectors[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && songIndex == null) {
                  currentSecondSelectors[i].innerHTML = seconds;
                }
              }
            }
            function syncPlaylist(seconds) {
              var currentSecondPlaylistSelectors = document.querySelectorAll('.amplitude-current-seconds[data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              for (var i = 0; i < currentSecondPlaylistSelectors.length; i++) {
                var songIndex = currentSecondPlaylistSelectors[i].getAttribute("data-amplitude-song-index");
                if (songIndex == null) {
                  currentSecondPlaylistSelectors[i].innerHTML = seconds;
                }
              }
            }
            function syncSong(seconds) {
              if (_config2.default.active_playlist == null) {
                var currentSecondSongSelectors = document.querySelectorAll('.amplitude-current-seconds[data-amplitude-song-index="' + _config2.default.active_index + '"]');
                for (var i = 0; i < currentSecondSongSelectors.length; i++) {
                  var playlist = currentSecondSongSelectors[i].getAttribute("data-amplitude-playlist");
                  if (playlist == null) {
                    currentSecondSongSelectors[i].innerHTML = seconds;
                  }
                }
              }
            }
            function syncSongInPlaylist(seconds) {
              var activePlaylistIndex = _config2.default.active_playlist != "" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
              var currentSecondPlaylistSongSelectors = document.querySelectorAll('.amplitude-current-seconds[data-amplitude-playlist="' + _config2.default.active_playlist + '"][data-amplitude-song-index="' + activePlaylistIndex + '"]');
              for (var i = 0; i < currentSecondPlaylistSongSelectors.length; i++) {
                currentSecondPlaylistSongSelectors[i].innerHTML = seconds;
              }
            }
            function resetTimes() {
              var secondSelectors = document.querySelectorAll(".amplitude-current-seconds");
              for (var i = 0; i < secondSelectors.length; i++) {
                secondSelectors[i].innerHTML = "00";
              }
            }
            return {
              sync,
              resetTimes
            };
          }();
          exports2.default = CurrentSecondElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var CurrentTimeElements = function() {
            function sync(currentTime) {
              syncGlobal(currentTime);
              syncPlaylist(currentTime);
              syncSong(currentTime);
              syncSongInPlaylist(currentTime);
            }
            function syncGlobal(time) {
              var currentTimeSelectors = document.querySelectorAll(".amplitude-current-time");
              var timeText = time.minutes + ":" + time.seconds;
              if (time.hours > 0) {
                timeText = time.hours + ":" + timeText;
              }
              for (var i = 0; i < currentTimeSelectors.length; i++) {
                var playlist = currentTimeSelectors[i].getAttribute("data-amplitude-playlist");
                var songIndex = currentTimeSelectors[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && songIndex == null) {
                  currentTimeSelectors[i].innerHTML = timeText;
                }
              }
            }
            function syncPlaylist(time) {
              var currentTimeSelectors = document.querySelectorAll('.amplitude-current-time[data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              var timeText = time.minutes + ":" + time.seconds;
              if (time.hours > 0) {
                timeText = time.hours + ":" + timeText;
              }
              for (var i = 0; i < currentTimeSelectors.length; i++) {
                var songIndex = currentTimeSelectors[i].getAttribute("data-amplitude-song-index");
                if (songIndex == null) {
                  currentTimeSelectors[i].innerHTML = timeText;
                }
              }
            }
            function syncSong(time) {
              if (_config2.default.active_playlist == null) {
                var currentTimeSelectors = document.querySelectorAll('.amplitude-current-time[data-amplitude-song-index="' + _config2.default.active_index + '"]');
                var timeText = time.minutes + ":" + time.seconds;
                if (time.hours > 0) {
                  timeText = time.hours + ":" + timeText;
                }
                for (var i = 0; i < currentTimeSelectors.length; i++) {
                  var playlist = currentTimeSelectors[i].getAttribute("data-amplitude-playlist");
                  if (playlist == null) {
                    currentTimeSelectors[i].innerHTML = timeText;
                  }
                }
              }
            }
            function syncSongInPlaylist(time) {
              var activePlaylistIndex = _config2.default.active_playlist != "" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
              var currentTimeSelectors = document.querySelectorAll('.amplitude-current-time[data-amplitude-playlist="' + _config2.default.active_playlist + '"][data-amplitude-song-index="' + activePlaylistIndex + '"]');
              var timeText = time.minutes + ":" + time.seconds;
              if (time.hours > 0) {
                timeText = time.hours + ":" + timeText;
              }
              for (var i = 0; i < currentTimeSelectors.length; i++) {
                currentTimeSelectors[i].innerHTML = timeText;
              }
            }
            function resetTimes() {
              var timeSelectors = document.querySelectorAll(".amplitude-current-time");
              for (var i = 0; i < timeSelectors.length; i++) {
                timeSelectors[i].innerHTML = "00:00";
              }
            }
            return {
              sync,
              resetTimes
            };
          }();
          exports2.default = CurrentTimeElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var DurationCountDownTimeElements = function() {
            function sync(countDownTime, songDuration) {
              var timeRemaining = computeTimeRemaining(countDownTime, songDuration);
              syncGlobal(timeRemaining);
              syncPlaylist(timeRemaining);
              syncSong(timeRemaining);
              syncSongInPlaylist(timeRemaining);
            }
            function syncGlobal(timeRemaining) {
              var durationTimeRemainingSelectors = document.querySelectorAll(".amplitude-time-remaining");
              for (var i = 0; i < durationTimeRemainingSelectors.length; i++) {
                var playlist = durationTimeRemainingSelectors[i].getAttribute("data-amplitude-playlist");
                var songIndex = durationTimeRemainingSelectors[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && songIndex == null) {
                  durationTimeRemainingSelectors[i].innerHTML = timeRemaining;
                }
              }
            }
            function syncPlaylist(timeRemaining) {
              var durationTimeRemainingSelectors = document.querySelectorAll('.amplitude-time-remaining[data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              for (var i = 0; i < durationTimeRemainingSelectors.length; i++) {
                var songIndex = durationTimeRemainingSelectors[i].getAttribute("data-amplitude-song-index");
                if (songIndex == null) {
                  durationTimeRemainingSelectors[i].innerHTML = timeRemaining;
                }
              }
            }
            function syncSong(timeRemaining) {
              if (_config2.default.active_playlist == null) {
                var durationTimeRemainingSelectors = document.querySelectorAll('.amplitude-time-remaining[data-amplitude-song-index="' + _config2.default.active_index + '"]');
                for (var i = 0; i < durationTimeRemainingSelectors.length; i++) {
                  var playlist = durationTimeRemainingSelectors[i].getAttribute("data-amplitude-playlist");
                  if (playlist == null) {
                    durationTimeRemainingSelectors[i].innerHTML = timeRemaining;
                  }
                }
              }
            }
            function syncSongInPlaylist(timeRemaining) {
              var activePlaylistIndex = _config2.default.active_playlist != "" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
              var durationTimeRemainingSelectors = document.querySelectorAll('.amplitude-time-remaining[data-amplitude-playlist="' + _config2.default.active_playlist + '"][data-amplitude-song-index="' + activePlaylistIndex + '"]');
              for (var i = 0; i < durationTimeRemainingSelectors.length; i++) {
                durationTimeRemainingSelectors[i].innerHTML = timeRemaining;
              }
            }
            function resetTimes() {
              var durationTimeRemainingSelectors = document.querySelectorAll(".amplitude-time-remaining");
              for (var i = 0; i < durationTimeRemainingSelectors.length; i++) {
                durationTimeRemainingSelectors[i].innerHTML = "00";
              }
            }
            function computeTimeRemaining(currentTime, songDuration) {
              var timeRemaining = "00:00";
              var totalCurrentSeconds = parseInt(currentTime.seconds) + parseInt(currentTime.minutes) * 60 + parseInt(currentTime.hours) * 60 * 60;
              var totalDurationSeconds = parseInt(songDuration.seconds) + parseInt(songDuration.minutes) * 60 + parseInt(songDuration.hours) * 60 * 60;
              if (!isNaN(totalCurrentSeconds) && !isNaN(totalDurationSeconds)) {
                var timeRemainingTotalSeconds = totalDurationSeconds - totalCurrentSeconds;
                var remainingHours = Math.floor(timeRemainingTotalSeconds / 3600);
                var remainingMinutes = Math.floor((timeRemainingTotalSeconds - remainingHours * 3600) / 60);
                var remainingSeconds = timeRemainingTotalSeconds - remainingHours * 3600 - remainingMinutes * 60;
                timeRemaining = (remainingMinutes < 10 ? "0" + remainingMinutes : remainingMinutes) + ":" + (remainingSeconds < 10 ? "0" + remainingSeconds : remainingSeconds);
                if (remainingHours > 0) {
                  timeRemaining = remainingHours + ":" + timeRemaining;
                }
              }
              return timeRemaining;
            }
            return {
              sync,
              resetTimes
            };
          }();
          exports2.default = DurationCountDownTimeElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var DurationHourElements = function() {
            function sync(hours) {
              syncGlobal(hours);
              syncPlaylist(hours);
              syncSong(hours);
              syncSongInPlaylist(hours);
            }
            function syncGlobal(hours) {
              var durationHourSelectors = document.querySelectorAll(".amplitude-duration-hours");
              for (var i = 0; i < durationHourSelectors.length; i++) {
                var playlist = durationHourSelectors[i].getAttribute("data-amplitude-playlist");
                var songIndex = durationHourSelectors[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && songIndex == null) {
                  durationHourSelectors[i].innerHTML = hours;
                }
              }
            }
            function syncPlaylist(hours) {
              var durationHourSelectors = document.querySelectorAll('.amplitude-duration-hours[data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              for (var i = 0; i < durationHourSelectors.length; i++) {
                var songIndex = durationHourSelectors[i].getAttribute("data-amplitude-song-index");
                if (songIndex == null) {
                  durationHourSelectors[i].innerHTML = hours;
                }
              }
            }
            function syncSong(hours) {
              if (_config2.default.active_playlist == null) {
                var durationHourSelectors = document.querySelectorAll('.amplitude-duration-hours[data-amplitude-song-index="' + _config2.default.active_index + '"]');
                for (var i = 0; i < durationHourSelectors.length; i++) {
                  var playlist = durationHourSelectors[i].getAttribute("data-amplitude-playlist");
                  if (playlist == null) {
                    durationHourSelectors[i].innerHTML = hours;
                  }
                }
              }
            }
            function syncSongInPlaylist(hours) {
              var activePlaylistIndex = _config2.default.active_playlist != "" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
              var durationHourSelectors = document.querySelectorAll('.amplitude-duration-hours[data-amplitude-playlist="' + _config2.default.active_playlist + '"][data-amplitude-song-index="' + activePlaylistIndex + '"]');
              for (var i = 0; i < durationHourSelectors.length; i++) {
                durationHourSelectors[i].innerHTML = hours;
              }
            }
            function resetTimes() {
              var durationHourSelectors = document.querySelectorAll(".amplitude-duration-hours");
              for (var i = 0; i < durationHourSelectors.length; i++) {
                durationHourSelectors[i].innerHTML = "00";
              }
            }
            return {
              sync,
              resetTimes
            };
          }();
          exports2.default = DurationHourElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var DurationMinuteElements = function() {
            function sync(minutes) {
              syncGlobal(minutes);
              syncPlaylist(minutes);
              syncSong(minutes);
              syncSongInPlaylist(minutes);
            }
            function syncGlobal(minutes) {
              var durationMinuteSelectors = document.querySelectorAll(".amplitude-duration-minutes");
              for (var i = 0; i < durationMinuteSelectors.length; i++) {
                var playlist = durationMinuteSelectors[i].getAttribute("data-amplitude-playlist");
                var songIndex = durationMinuteSelectors[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && songIndex == null) {
                  durationMinuteSelectors[i].innerHTML = minutes;
                }
              }
            }
            function syncPlaylist(minutes) {
              var durationMinuteSelectors = document.querySelectorAll('.amplitude-duration-minutes[data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              for (var i = 0; i < durationMinuteSelectors.length; i++) {
                var songIndex = durationMinuteSelectors[i].getAttribute("data-amplitude-song-index");
                if (songIndex == null) {
                  durationMinuteSelectors[i].innerHTML = minutes;
                }
              }
            }
            function syncSong(minutes) {
              if (_config2.default.active_playlist == null) {
                var durationMinuteSelectors = document.querySelectorAll('.amplitude-duration-minutes[data-amplitude-song-index="' + _config2.default.active_index + '"]');
                for (var i = 0; i < durationMinuteSelectors.length; i++) {
                  var playlist = durationMinuteSelectors[i].getAttribute("data-amplitude-playlist");
                  if (playlist == null) {
                    durationMinuteSelectors[i].innerHTML = minutes;
                  }
                }
              }
            }
            function syncSongInPlaylist(minutes) {
              var activePlaylistIndex = _config2.default.active_playlist != "" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
              var durationMinuteSelectors = document.querySelectorAll('.amplitude-duration-minutes[data-amplitude-playlist="' + _config2.default.active_playlist + '"][data-amplitude-song-index="' + activePlaylistIndex + '"]');
              for (var i = 0; i < durationMinuteSelectors.length; i++) {
                durationMinuteSelectors[i].innerHTML = minutes;
              }
            }
            function resetTimes() {
              var durationMinuteSelectors = document.querySelectorAll(".amplitude-duration-minutes");
              for (var i = 0; i < durationMinuteSelectors.length; i++) {
                durationMinuteSelectors[i].innerHTML = "00";
              }
            }
            return {
              sync,
              resetTimes
            };
          }();
          exports2.default = DurationMinuteElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var DurationSecondElements = function() {
            function sync(seconds) {
              syncGlobal(seconds);
              syncPlaylist(seconds);
              syncSong(seconds);
              syncSongInPlaylist(seconds);
            }
            function syncGlobal(seconds) {
              var durationSecondSelectors = document.querySelectorAll(".amplitude-duration-seconds");
              for (var i = 0; i < durationSecondSelectors.length; i++) {
                var playlist = durationSecondSelectors[i].getAttribute("data-amplitude-playlist");
                var songIndex = durationSecondSelectors[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && songIndex == null) {
                  durationSecondSelectors[i].innerHTML = seconds;
                }
              }
            }
            function syncPlaylist(seconds) {
              var durationSecondSelectors = document.querySelectorAll('.amplitude-duration-seconds[data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              for (var i = 0; i < durationSecondSelectors.length; i++) {
                var songIndex = durationSecondSelectors[i].getAttribute("data-amplitude-song-index");
                if (songIndex == null) {
                  durationSecondSelectors[i].innerHTML = seconds;
                }
              }
            }
            function syncSong(seconds) {
              if (_config2.default.active_playlist == null) {
                var durationSecondSelectors = document.querySelectorAll('.amplitude-duration-seconds[data-amplitude-song-index="' + _config2.default.active_index + '"]');
                for (var i = 0; i < durationSecondSelectors.length; i++) {
                  var playlist = durationSecondSelectors[i].getAttribute("data--amplitude-playlist");
                  if (playlist == null) {
                    durationSecondSelectors[i].innerHTML = seconds;
                  }
                }
              }
            }
            function syncSongInPlaylist(seconds) {
              var activePlaylistIndex = _config2.default.active_playlist != "" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
              var durationSecondSelectors = document.querySelectorAll('.amplitude-duration-seconds[data-amplitude-playlist="' + _config2.default.active_playlist + '"][data-amplitude-song-index="' + activePlaylistIndex + '"]');
              for (var i = 0; i < durationSecondSelectors.length; i++) {
                durationSecondSelectors[i].innerHTML = seconds;
              }
            }
            function resetTimes() {
              var durationSecondSelectors = document.querySelectorAll(".amplitude-duration-seconds");
              for (var i = 0; i < durationSecondSelectors.length; i++) {
                durationSecondSelectors[i].innerHTML = "00";
              }
            }
            return {
              sync,
              resetTimes
            };
          }();
          exports2.default = DurationSecondElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _config = __webpack_require__(0);
          var _config2 = _interopRequireDefault(_config);
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
          }
          var DurationTimeElements = function() {
            function sync(durationTime) {
              var durationText = computeDurationText(durationTime);
              syncGlobal(durationText);
              syncPlaylist(durationText);
              syncSong(durationText);
              syncSongInPlaylist(durationText);
            }
            function syncGlobal(durationText) {
              var durationTimeSelectors = document.querySelectorAll(".amplitude-duration-time");
              for (var i = 0; i < durationTimeSelectors.length; i++) {
                var playlist = durationTimeSelectors[i].getAttribute("data-amplitude-playlist");
                var songIndex = durationTimeSelectors[i].getAttribute("data-amplitude-song-index");
                if (playlist == null && songIndex == null) {
                  durationTimeSelectors[i].innerHTML = durationText;
                }
              }
            }
            function syncPlaylist(durationText) {
              var durationTimeSelectors = document.querySelectorAll('.amplitude-duration-time[data-amplitude-playlist="' + _config2.default.active_playlist + '"]');
              for (var i = 0; i < durationTimeSelectors.length; i++) {
                var songIndex = durationTimeSelectors[i].getAttribute("data-amplitude-song-index");
                if (songIndex == null) {
                  durationTimeSelectors[i].innerHTML = durationText;
                }
              }
            }
            function syncSong(durationText) {
              if (_config2.default.active_playlist == null) {
                var durationTimeSelectors = document.querySelectorAll('.amplitude-duration-time[data-amplitude-song-index="' + _config2.default.active_index + '"]');
                for (var i = 0; i < durationTimeSelectors.length; i++) {
                  var playlist = durationTimeSelectors[i].getAttribute("data-amplitude-playlist");
                  if (playlist == null) {
                    durationTimeSelectors[i].innerHTML = durationText;
                  }
                }
              }
            }
            function syncSongInPlaylist(durationText) {
              var activePlaylistIndex = _config2.default.active_playlist != "" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;
              var durationTimeSelectors = document.querySelectorAll('.amplitude-duration-time[data-amplitude-playlist="' + _config2.default.active_playlist + '"][data-amplitude-song-index="' + activePlaylistIndex + '"]');
              for (var i = 0; i < durationTimeSelectors.length; i++) {
                durationTimeSelectors[i].innerHTML = durationText;
              }
            }
            function resetTimes() {
              var durationTimeSelectors = document.querySelectorAll(".amplitude-duration-time");
              for (var i = 0; i < durationTimeSelectors.length; i++) {
                durationTimeSelectors[i].innerHTML = "00:00";
              }
            }
            function computeDurationText(durationTime) {
              var durationText = "00:00";
              if (!isNaN(durationTime.minutes) && !isNaN(durationTime.seconds)) {
                durationText = durationTime.minutes + ":" + durationTime.seconds;
                if (!isNaN(durationTime.hours) && durationTime.hours > 0) {
                  durationText = durationTime.hours + ":" + durationText;
                }
              }
              return durationText;
            }
            return {
              sync,
              resetTimes
            };
          }();
          exports2.default = DurationTimeElements;
          module2.exports = exports2["default"];
        },
        function(module2, exports2) {
          module2.exports = { "name": "amplitudejs", "version": "5.3.2", "description": "A JavaScript library that allows you to control the design of your media controls in your webpage -- not the browser. No dependencies (jQuery not required) https://521dimensions.com/open-source/amplitudejs", "main": "dist/amplitude.js", "devDependencies": { "babel-core": "^6.26.3", "babel-loader": "^7.1.5", "babel-plugin-add-module-exports": "0.2.1", "babel-polyfill": "^6.26.0", "babel-preset-es2015": "^6.18.0", "husky": "^1.3.1", "jest": "^23.6.0", "prettier": "1.15.1", "pretty-quick": "^1.11.1", "watch": "^1.0.2", "webpack": "^2.7.0" }, "directories": { "doc": "docs" }, "files": ["dist"], "funding": { "type": "opencollective", "url": "https://opencollective.com/amplitudejs" }, "scripts": { "build": "node_modules/.bin/webpack", "prettier": "npx pretty-quick", "preversion": "npx pretty-quick && npm run test", "postversion": "git push && git push --tags", "test": "jest", "version": "npm run build && git add -A dist" }, "repository": { "type": "git", "url": "git+https://github.com/521dimensions/amplitudejs.git" }, "keywords": ["webaudio", "html5", "javascript", "audio-player"], "author": "521 Dimensions (https://521dimensions.com)", "license": "MIT", "bugs": { "url": "https://github.com/521dimensions/amplitudejs/issues" }, "homepage": "https://github.com/521dimensions/amplitudejs#readme" };
        }
      ]);
    });
  }
});

// dep:amplitudejs
var amplitudejs_default = require_amplitude();
export {
  amplitudejs_default as default
};
//# sourceMappingURL=amplitudejs.js.map
